//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 52 files.
  struct file {
    /// Resource file `AAJSFiles.bundle`.
    static let aajsFilesBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "AAJSFiles", pathExtension: "bundle")
    /// Resource file `CLApp.cer`.
    static let clAppCer = Rswift.FileResource(bundle: R.hostingBundle, name: "CLApp", pathExtension: "cer")
    /// Resource file `LCActionSheet.bundle`.
    static let lcActionSheetBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "LCActionSheet", pathExtension: "bundle")
    /// Resource file `LICENSE`.
    static let licensE = Rswift.FileResource(bundle: R.hostingBundle, name: "LICENSE", pathExtension: "")
    /// Resource file `MLEmoji_Expression.bundle`.
    static let mlEmoji_ExpressionBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "MLEmoji_Expression", pathExtension: "bundle")
    /// Resource file `MLEmoji_Expression.plist`.
    static let mlEmoji_ExpressionPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "MLEmoji_Expression", pathExtension: "plist")
    /// Resource file `MLEmoji_ExpressionImage.plist`.
    static let mlEmoji_ExpressionImagePlist = Rswift.FileResource(bundle: R.hostingBundle, name: "MLEmoji_ExpressionImage", pathExtension: "plist")
    /// Resource file `PGDatePicker.bundle`.
    static let pgDatePickerBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "PGDatePicker", pathExtension: "bundle")
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `TZImagePickerController.bundle`.
    static let tzImagePickerControllerBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "TZImagePickerController", pathExtension: "bundle")
    /// Resource file `TreeViewDirectLinesButton.png`.
    static let treeViewDirectLinesButtonPng = Rswift.FileResource(bundle: R.hostingBundle, name: "TreeViewDirectLinesButton", pathExtension: "png")
    /// Resource file `TreeViewOrthogonalLinesButton.png`.
    static let treeViewOrthogonalLinesButtonPng = Rswift.FileResource(bundle: R.hostingBundle, name: "TreeViewOrthogonalLinesButton", pathExtension: "png")
    /// Resource file `TreeViewSubtreeCollapsedButton.png`.
    static let treeViewSubtreeCollapsedButtonPng = Rswift.FileResource(bundle: R.hostingBundle, name: "TreeViewSubtreeCollapsedButton", pathExtension: "png")
    /// Resource file `TreeViewSubtreeExpandedButton.png`.
    static let treeViewSubtreeExpandedButtonPng = Rswift.FileResource(bundle: R.hostingBundle, name: "TreeViewSubtreeExpandedButton", pathExtension: "png")
    /// Resource file `address.json`.
    static let addressJson = Rswift.FileResource(bundle: R.hostingBundle, name: "address", pathExtension: "json")
    /// Resource file `backGray.png`.
    static let backGrayPng = Rswift.FileResource(bundle: R.hostingBundle, name: "backGray", pathExtension: "png")
    /// Resource file `continueBlue@2x.png`.
    static let continueBlue2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "continueBlue@2x", pathExtension: "png")
    /// Resource file `continueWhite@2x.png`.
    static let continueWhite2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "continueWhite@2x", pathExtension: "png")
    /// Resource file `ewmbgtop@2x.png`.
    static let ewmbgtop2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ewmbgtop@2x", pathExtension: "png")
    /// Resource file `ewmbgtop@3x.png`.
    static let ewmbgtop3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ewmbgtop@3x", pathExtension: "png")
    /// Resource file `mine_avatar@2x.png`.
    static let mine_avatar2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mine_avatar@2x", pathExtension: "png")
    /// Resource file `mine_avatar@3x.png`.
    static let mine_avatar3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mine_avatar@3x", pathExtension: "png")
    /// Resource file `pauseBlue@2x.png`.
    static let pauseBlue2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pauseBlue@2x", pathExtension: "png")
    /// Resource file `pauseWhite@2x.png`.
    static let pauseWhite2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pauseWhite@2x", pathExtension: "png")
    /// Resource file `playBlue@2x.png`.
    static let playBlue2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "playBlue@2x", pathExtension: "png")
    /// Resource file `playIcon@2x.png`.
    static let playIcon2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "playIcon@2x", pathExtension: "png")
    /// Resource file `playWhite@2x.png`.
    static let playWhite2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "playWhite@2x", pathExtension: "png")
    /// Resource file `proStart@2x.png`.
    static let proStart2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "proStart@2x", pathExtension: "png")
    /// Resource file `proStop@2x.png`.
    static let proStop2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "proStop@2x", pathExtension: "png")
    /// Resource file `protocol.html`.
    static let protocolHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "protocol", pathExtension: "html")
    /// Resource file `qf_project_fengxianxiang@2x.png`.
    static let qf_project_fengxianxiang2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "qf_project_fengxianxiang@2x", pathExtension: "png")
    /// Resource file `qf_project_nextArrow@2x.png`.
    static let qf_project_nextArrow2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "qf_project_nextArrow@2x", pathExtension: "png")
    /// Resource file `qf_project_textBack@2x.png`.
    static let qf_project_textBack2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "qf_project_textBack@2x", pathExtension: "png")
    /// Resource file `qf_project_waring@2x.png`.
    static let qf_project_waring2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "qf_project_waring@2x", pathExtension: "png")
    /// Resource file `qf_project_xiangmudefen@2x.png`.
    static let qf_project_xiangmudefen2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "qf_project_xiangmudefen@2x", pathExtension: "png")
    /// Resource file `qf_project_yingdanzhishu@2x.png`.
    static let qf_project_yingdanzhishu2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "qf_project_yingdanzhishu@2x", pathExtension: "png")
    /// Resource file `sdRefeshView_arrow@2x.png`.
    static let sdRefeshView_arrow2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sdRefeshView_arrow@2x", pathExtension: "png")
    /// Resource file `slider@2x.png`.
    static let slider2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "slider@2x", pathExtension: "png")
    /// Resource file `tab_main_normal@2x.png`.
    static let tab_main_normal2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tab_main_normal@2x", pathExtension: "png")
    /// Resource file `tab_main_selected@2x.png`.
    static let tab_main_selected2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tab_main_selected@2x", pathExtension: "png")
    /// Resource file `voiceL1@2x.png`.
    static let voiceL12xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "voiceL1@2x", pathExtension: "png")
    /// Resource file `voiceL1@3x.png`.
    static let voiceL13xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "voiceL1@3x", pathExtension: "png")
    /// Resource file `voiceL2@2x.png`.
    static let voiceL22xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "voiceL2@2x", pathExtension: "png")
    /// Resource file `voiceL2@3x.png`.
    static let voiceL23xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "voiceL2@3x", pathExtension: "png")
    /// Resource file `voiceL3@2x.png`.
    static let voiceL32xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "voiceL3@2x", pathExtension: "png")
    /// Resource file `voiceL3@3x.png`.
    static let voiceL33xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "voiceL3@3x", pathExtension: "png")
    /// Resource file `voiceR1@2x.png`.
    static let voiceR12xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "voiceR1@2x", pathExtension: "png")
    /// Resource file `voiceR1@3x.png`.
    static let voiceR13xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "voiceR1@3x", pathExtension: "png")
    /// Resource file `voiceR2@2x.png`.
    static let voiceR22xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "voiceR2@2x", pathExtension: "png")
    /// Resource file `voiceR2@3x.png`.
    static let voiceR23xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "voiceR2@3x", pathExtension: "png")
    /// Resource file `voiceR3@2x.png`.
    static let voiceR32xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "voiceR3@2x", pathExtension: "png")
    /// Resource file `voiceR3@3x.png`.
    static let voiceR33xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "voiceR3@3x", pathExtension: "png")
    
    /// `bundle.url(forResource: "AAJSFiles", withExtension: "bundle")`
    static func aajsFilesBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aajsFilesBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "CLApp", withExtension: "cer")`
    static func clAppCer(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.clAppCer
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "LCActionSheet", withExtension: "bundle")`
    static func lcActionSheetBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lcActionSheetBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "LICENSE", withExtension: "")`
    static func licensE(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.licensE
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "MLEmoji_Expression", withExtension: "bundle")`
    static func mlEmoji_ExpressionBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mlEmoji_ExpressionBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "MLEmoji_Expression", withExtension: "plist")`
    static func mlEmoji_ExpressionPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mlEmoji_ExpressionPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "MLEmoji_ExpressionImage", withExtension: "plist")`
    static func mlEmoji_ExpressionImagePlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mlEmoji_ExpressionImagePlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "PGDatePicker", withExtension: "bundle")`
    static func pgDatePickerBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pgDatePickerBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "TZImagePickerController", withExtension: "bundle")`
    static func tzImagePickerControllerBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tzImagePickerControllerBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "TreeViewDirectLinesButton", withExtension: "png")`
    static func treeViewDirectLinesButtonPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.treeViewDirectLinesButtonPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "TreeViewOrthogonalLinesButton", withExtension: "png")`
    static func treeViewOrthogonalLinesButtonPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.treeViewOrthogonalLinesButtonPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "TreeViewSubtreeCollapsedButton", withExtension: "png")`
    static func treeViewSubtreeCollapsedButtonPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.treeViewSubtreeCollapsedButtonPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "TreeViewSubtreeExpandedButton", withExtension: "png")`
    static func treeViewSubtreeExpandedButtonPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.treeViewSubtreeExpandedButtonPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "address", withExtension: "json")`
    static func addressJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.addressJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "backGray", withExtension: "png")`
    static func backGrayPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.backGrayPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "continueBlue@2x", withExtension: "png")`
    static func continueBlue2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.continueBlue2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "continueWhite@2x", withExtension: "png")`
    static func continueWhite2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.continueWhite2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "ewmbgtop@2x", withExtension: "png")`
    static func ewmbgtop2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ewmbgtop2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "ewmbgtop@3x", withExtension: "png")`
    static func ewmbgtop3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ewmbgtop3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "mine_avatar@2x", withExtension: "png")`
    static func mine_avatar2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mine_avatar2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "mine_avatar@3x", withExtension: "png")`
    static func mine_avatar3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mine_avatar3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "pauseBlue@2x", withExtension: "png")`
    static func pauseBlue2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pauseBlue2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "pauseWhite@2x", withExtension: "png")`
    static func pauseWhite2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pauseWhite2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "playBlue@2x", withExtension: "png")`
    static func playBlue2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.playBlue2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "playIcon@2x", withExtension: "png")`
    static func playIcon2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.playIcon2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "playWhite@2x", withExtension: "png")`
    static func playWhite2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.playWhite2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "proStart@2x", withExtension: "png")`
    static func proStart2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.proStart2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "proStop@2x", withExtension: "png")`
    static func proStop2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.proStop2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "protocol", withExtension: "html")`
    static func protocolHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.protocolHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "qf_project_fengxianxiang@2x", withExtension: "png")`
    static func qf_project_fengxianxiang2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.qf_project_fengxianxiang2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "qf_project_nextArrow@2x", withExtension: "png")`
    static func qf_project_nextArrow2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.qf_project_nextArrow2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "qf_project_textBack@2x", withExtension: "png")`
    static func qf_project_textBack2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.qf_project_textBack2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "qf_project_waring@2x", withExtension: "png")`
    static func qf_project_waring2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.qf_project_waring2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "qf_project_xiangmudefen@2x", withExtension: "png")`
    static func qf_project_xiangmudefen2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.qf_project_xiangmudefen2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "qf_project_yingdanzhishu@2x", withExtension: "png")`
    static func qf_project_yingdanzhishu2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.qf_project_yingdanzhishu2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "sdRefeshView_arrow@2x", withExtension: "png")`
    static func sdRefeshView_arrow2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sdRefeshView_arrow2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "slider@2x", withExtension: "png")`
    static func slider2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.slider2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "tab_main_normal@2x", withExtension: "png")`
    static func tab_main_normal2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tab_main_normal2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "tab_main_selected@2x", withExtension: "png")`
    static func tab_main_selected2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tab_main_selected2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "voiceL1@2x", withExtension: "png")`
    static func voiceL12xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.voiceL12xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "voiceL1@3x", withExtension: "png")`
    static func voiceL13xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.voiceL13xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "voiceL2@2x", withExtension: "png")`
    static func voiceL22xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.voiceL22xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "voiceL2@3x", withExtension: "png")`
    static func voiceL23xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.voiceL23xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "voiceL3@2x", withExtension: "png")`
    static func voiceL32xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.voiceL32xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "voiceL3@3x", withExtension: "png")`
    static func voiceL33xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.voiceL33xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "voiceR1@2x", withExtension: "png")`
    static func voiceR12xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.voiceR12xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "voiceR1@3x", withExtension: "png")`
    static func voiceR13xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.voiceR13xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "voiceR2@2x", withExtension: "png")`
    static func voiceR22xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.voiceR22xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "voiceR2@3x", withExtension: "png")`
    static func voiceR23xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.voiceR23xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "voiceR3@2x", withExtension: "png")`
    static func voiceR32xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.voiceR32xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "voiceR3@3x", withExtension: "png")`
    static func voiceR33xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.voiceR33xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 548 images.
  struct image {
    /// Image `AlbumComment`.
    static let albumComment = Rswift.ImageResource(bundle: R.hostingBundle, name: "AlbumComment")
    /// Image `AlbumOperateMoreHL`.
    static let albumOperateMoreHL = Rswift.ImageResource(bundle: R.hostingBundle, name: "AlbumOperateMoreHL")
    /// Image `AlbumOperateMore`.
    static let albumOperateMore = Rswift.ImageResource(bundle: R.hostingBundle, name: "AlbumOperateMore")
    /// Image `Arrow`.
    static let arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrow")
    /// Image `CoachPayGray`.
    static let coachPayGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "CoachPayGray")
    /// Image `CoachPay`.
    static let coachPay = Rswift.ImageResource(bundle: R.hostingBundle, name: "CoachPay")
    /// Image `Delete_ios7`.
    static let delete_ios7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Delete_ios7")
    /// Image `HomeAdd`.
    static let homeAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "HomeAdd")
    /// Image `HomeAnalysis`.
    static let homeAnalysis = Rswift.ImageResource(bundle: R.hostingBundle, name: "HomeAnalysis")
    /// Image `HomeMessage`.
    static let homeMessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "HomeMessage")
    /// Image `HomeSearch`.
    static let homeSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "HomeSearch")
    /// Image `HomeWorkCycle`.
    static let homeWorkCycle = Rswift.ImageResource(bundle: R.hostingBundle, name: "HomeWorkCycle")
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `LikeCmtBg`.
    static let likeCmtBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "LikeCmtBg")
    /// Image `Like`.
    static let like = Rswift.ImageResource(bundle: R.hostingBundle, name: "Like")
    /// Image `MineBackImage`.
    static let mineBackImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "MineBackImage")
    /// Image `ProPeopleIcon`.
    static let proPeopleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProPeopleIcon")
    /// Image `Proappointment`.
    static let proappointment = Rswift.ImageResource(bundle: R.hostingBundle, name: "Proappointment")
    /// Image `QFBatchMessage`.
    static let qfBatchMessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "QFBatchMessage")
    /// Image `QFBatchMove`.
    static let qfBatchMove = Rswift.ImageResource(bundle: R.hostingBundle, name: "QFBatchMove")
    /// Image `QFCheckDefaultImage`.
    static let qfCheckDefaultImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "QFCheckDefaultImage")
    /// Image `QFCheckDep`.
    static let qfCheckDep = Rswift.ImageResource(bundle: R.hostingBundle, name: "QFCheckDep")
    /// Image `QFContactshut`.
    static let qfContactshut = Rswift.ImageResource(bundle: R.hostingBundle, name: "QFContactshut")
    /// Image `QFMoreImage`.
    static let qfMoreImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "QFMoreImage")
    /// Image `QF_Tag_Blue`.
    static let qf_Tag_Blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "QF_Tag_Blue")
    /// Image `QF_Tag_DarkGreen`.
    static let qf_Tag_DarkGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "QF_Tag_DarkGreen")
    /// Image `QF_Tag_LightGreen`.
    static let qf_Tag_LightGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "QF_Tag_LightGreen")
    /// Image `QF_Tag_Red`.
    static let qf_Tag_Red = Rswift.ImageResource(bundle: R.hostingBundle, name: "QF_Tag_Red")
    /// Image `QF_Tag_Yellow`.
    static let qf_Tag_Yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "QF_Tag_Yellow")
    /// Image `QFnoCheckDep`.
    static let qFnoCheckDep = Rswift.ImageResource(bundle: R.hostingBundle, name: "QFnoCheckDep")
    /// Image `QFxufuaniu`.
    static let qFxufuaniu = Rswift.ImageResource(bundle: R.hostingBundle, name: "QFxufuaniu")
    /// Image `QuickClient`.
    static let quickClient = Rswift.ImageResource(bundle: R.hostingBundle, name: "QuickClient")
    /// Image `QuickCoach`.
    static let quickCoach = Rswift.ImageResource(bundle: R.hostingBundle, name: "QuickCoach")
    /// Image `QuickContant`.
    static let quickContant = Rswift.ImageResource(bundle: R.hostingBundle, name: "QuickContant")
    /// Image `QuickProject`.
    static let quickProject = Rswift.ImageResource(bundle: R.hostingBundle, name: "QuickProject")
    /// Image `TimelineAction`.
    static let timelineAction = Rswift.ImageResource(bundle: R.hostingBundle, name: "TimelineAction")
    /// Image `TimelineAnalyse`.
    static let timelineAnalyse = Rswift.ImageResource(bundle: R.hostingBundle, name: "TimelineAnalyse")
    /// Image `TreeViewDirectLinesButton`.
    static let treeViewDirectLinesButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "TreeViewDirectLinesButton")
    /// Image `TreeViewOrthogonalLinesButton`.
    static let treeViewOrthogonalLinesButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "TreeViewOrthogonalLinesButton")
    /// Image `TreeViewSubtreeCollapsedButton`.
    static let treeViewSubtreeCollapsedButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "TreeViewSubtreeCollapsedButton")
    /// Image `TreeViewSubtreeExpandedButton`.
    static let treeViewSubtreeExpandedButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "TreeViewSubtreeExpandedButton")
    /// Image `addCoach`.
    static let addCoach = Rswift.ImageResource(bundle: R.hostingBundle, name: "addCoach")
    /// Image `addMember_highlighted`.
    static let addMember_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "addMember_highlighted")
    /// Image `addMember_normal`.
    static let addMember_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "addMember_normal")
    /// Image `add_emoj_default`.
    static let add_emoj_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_emoj_default")
    /// Image `add_emoj_focus`.
    static let add_emoj_focus = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_emoj_focus")
    /// Image `aiRecommend`.
    static let aiRecommend = Rswift.ImageResource(bundle: R.hostingBundle, name: "aiRecommend")
    /// Image `aiRemind`.
    static let aiRemind = Rswift.ImageResource(bundle: R.hostingBundle, name: "aiRemind")
    /// Image `analysisProblemCenter`.
    static let analysisProblemCenter = Rswift.ImageResource(bundle: R.hostingBundle, name: "analysisProblemCenter")
    /// Image `analysisProblemLeft`.
    static let analysisProblemLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "analysisProblemLeft")
    /// Image `analysisProblemRight`.
    static let analysisProblemRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "analysisProblemRight")
    /// Image `arrowWhite`.
    static let arrowWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowWhite")
    /// Image `at_default`.
    static let at_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "at_default")
    /// Image `at_focus`.
    static let at_focus = Rswift.ImageResource(bundle: R.hostingBundle, name: "at_focus")
    /// Image `backColor`.
    static let backColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "backColor")
    /// Image `backLog`.
    static let backLog = Rswift.ImageResource(bundle: R.hostingBundle, name: "backLog")
    /// Image `backWhite`.
    static let backWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "backWhite")
    /// Image `batchDep`.
    static let batchDep = Rswift.ImageResource(bundle: R.hostingBundle, name: "batchDep")
    /// Image `bind_acount`.
    static let bind_acount = Rswift.ImageResource(bundle: R.hostingBundle, name: "bind_acount")
    /// Image `bing0`.
    static let bing0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bing0")
    /// Image `bing1`.
    static let bing1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bing1")
    /// Image `bing2`.
    static let bing2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bing2")
    /// Image `cName`.
    static let cName = Rswift.ImageResource(bundle: R.hostingBundle, name: "cName")
    /// Image `cPeople`.
    static let cPeople = Rswift.ImageResource(bundle: R.hostingBundle, name: "cPeople")
    /// Image `cPhone`.
    static let cPhone = Rswift.ImageResource(bundle: R.hostingBundle, name: "cPhone")
    /// Image `cPosition`.
    static let cPosition = Rswift.ImageResource(bundle: R.hostingBundle, name: "cPosition")
    /// Image `cSanjiao`.
    static let cSanjiao = Rswift.ImageResource(bundle: R.hostingBundle, name: "cSanjiao")
    /// Image `cTrade`.
    static let cTrade = Rswift.ImageResource(bundle: R.hostingBundle, name: "cTrade")
    /// Image `calendar`.
    static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar")
    /// Image `car_normal`.
    static let car_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "car_normal")
    /// Image `car_select`.
    static let car_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "car_select")
    /// Image `carryDelete`.
    static let carryDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "carryDelete")
    /// Image `carryDown`.
    static let carryDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "carryDown")
    /// Image `ch_about_us_ico`.
    static let ch_about_us_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_about_us_ico")
    /// Image `ch_add_product_icon`.
    static let ch_add_product_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_add_product_icon")
    /// Image `ch_call_phone`.
    static let ch_call_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_call_phone")
    /// Image `ch_contact_detail_email`.
    static let ch_contact_detail_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_contact_detail_email")
    /// Image `ch_contact_detail_phone`.
    static let ch_contact_detail_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_contact_detail_phone")
    /// Image `ch_contact_dimission`.
    static let ch_contact_dimission = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_contact_dimission")
    /// Image `ch_contact_return`.
    static let ch_contact_return = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_contact_return")
    /// Image `ch_corp_administration_ico`.
    static let ch_corp_administration_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_corp_administration_ico")
    /// Image `ch_delete_ico`.
    static let ch_delete_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_delete_ico")
    /// Image `ch_div_right_new`.
    static let ch_div_right_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_div_right_new")
    /// Image `ch_growth_map_ico`.
    static let ch_growth_map_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_growth_map_ico")
    /// Image `ch_image_home`.
    static let ch_image_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_image_home")
    /// Image `ch_invited_join_ico`.
    static let ch_invited_join_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_invited_join_ico")
    /// Image `ch_message_center_ico`.
    static let ch_message_center_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_message_center_ico")
    /// Image `ch_product_edit_icon`.
    static let ch_product_edit_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_product_edit_icon")
    /// Image `ch_product_item_icon`.
    static let ch_product_item_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_product_item_icon")
    /// Image `ch_project_detail_base_state_1`.
    static let ch_project_detail_base_state_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_project_detail_base_state_1")
    /// Image `ch_project_detail_base_state_2`.
    static let ch_project_detail_base_state_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_project_detail_base_state_2")
    /// Image `ch_project_detail_base_state_3`.
    static let ch_project_detail_base_state_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_project_detail_base_state_3")
    /// Image `ch_project_detail_base_state_4`.
    static let ch_project_detail_base_state_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_project_detail_base_state_4")
    /// Image `ch_project_detail_base_state_5`.
    static let ch_project_detail_base_state_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_project_detail_base_state_5")
    /// Image `ch_project_stage_icon1`.
    static let ch_project_stage_icon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_project_stage_icon1")
    /// Image `ch_project_stage_icon2`.
    static let ch_project_stage_icon2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_project_stage_icon2")
    /// Image `ch_project_stage_icon3`.
    static let ch_project_stage_icon3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_project_stage_icon3")
    /// Image `ch_project_stage_icon4`.
    static let ch_project_stage_icon4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_project_stage_icon4")
    /// Image `ch_project_stage_icon5`.
    static let ch_project_stage_icon5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_project_stage_icon5")
    /// Image `ch_protrait_green`.
    static let ch_protrait_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_protrait_green")
    /// Image `ch_protrait_grey`.
    static let ch_protrait_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch_protrait_grey")
    /// Image `changeBtn`.
    static let changeBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "changeBtn")
    /// Image `changeStage_selected`.
    static let changeStage_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "changeStage_selected")
    /// Image `changeStage`.
    static let changeStage = Rswift.ImageResource(bundle: R.hostingBundle, name: "changeStage")
    /// Image `checkbox_normal`.
    static let checkbox_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_normal")
    /// Image `checkbox_selected`.
    static let checkbox_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_selected")
    /// Image `chooseDown`.
    static let chooseDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "chooseDown")
    /// Image `chooseUp`.
    static let chooseUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "chooseUp")
    /// Image `circle_normal`.
    static let circle_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle_normal")
    /// Image `circle_select`.
    static let circle_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle_select")
    /// Image `class`.
    static let `class` = Rswift.ImageResource(bundle: R.hostingBundle, name: "class")
    /// Image `clear`.
    static let clear = Rswift.ImageResource(bundle: R.hostingBundle, name: "clear")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `cloudRight`.
    static let cloudRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloudRight")
    /// Image `cloud`.
    static let cloud = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloud")
    /// Image `coach`.
    static let coach = Rswift.ImageResource(bundle: R.hostingBundle, name: "coach")
    /// Image `combobox`.
    static let combobox = Rswift.ImageResource(bundle: R.hostingBundle, name: "combobox")
    /// Image `comment_ico`.
    static let comment_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment_ico")
    /// Image `comment_write_icon`.
    static let comment_write_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment_write_icon")
    /// Image `commenticon`.
    static let commenticon = Rswift.ImageResource(bundle: R.hostingBundle, name: "commenticon")
    /// Image `consult_message_ico`.
    static let consult_message_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "consult_message_ico")
    /// Image `contactIcon`.
    static let contactIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "contactIcon")
    /// Image `contact_company`.
    static let contact_company = Rswift.ImageResource(bundle: R.hostingBundle, name: "contact_company")
    /// Image `contact_down`.
    static let contact_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "contact_down")
    /// Image `contact_email`.
    static let contact_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "contact_email")
    /// Image `contact_tel`.
    static let contact_tel = Rswift.ImageResource(bundle: R.hostingBundle, name: "contact_tel")
    /// Image `contact_up`.
    static let contact_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "contact_up")
    /// Image `continueBlue`.
    static let continueBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "continueBlue")
    /// Image `continueWhite`.
    static let continueWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "continueWhite")
    /// Image `creater`.
    static let creater = Rswift.ImageResource(bundle: R.hostingBundle, name: "creater")
    /// Image `crown1`.
    static let crown1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "crown1")
    /// Image `crown2`.
    static let crown2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "crown2")
    /// Image `crown3`.
    static let crown3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "crown3")
    /// Image `customer_call_selected`.
    static let customer_call_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "customer_call_selected")
    /// Image `customer_call`.
    static let customer_call = Rswift.ImageResource(bundle: R.hostingBundle, name: "customer_call")
    /// Image `customer_edit`.
    static let customer_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "customer_edit")
    /// Image `dashboardNomal`.
    static let dashboardNomal = Rswift.ImageResource(bundle: R.hostingBundle, name: "dashboardNomal")
    /// Image `dashboardSelect`.
    static let dashboardSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "dashboardSelect")
    /// Image `date`.
    static let date = Rswift.ImageResource(bundle: R.hostingBundle, name: "date")
    /// Image `defaultImage`.
    static let defaultImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "defaultImage")
    /// Image `delect`.
    static let delect = Rswift.ImageResource(bundle: R.hostingBundle, name: "delect")
    /// Image `deleteSure`.
    static let deleteSure = Rswift.ImageResource(bundle: R.hostingBundle, name: "deleteSure")
    /// Image `detail_action_ico`.
    static let detail_action_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail_action_ico")
    /// Image `detail_basedetail_ico`.
    static let detail_basedetail_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail_basedetail_ico")
    /// Image `detail_communic_ation_ico`.
    static let detail_communic_ation_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail_communic_ation_ico")
    /// Image `detail_expect_ico`.
    static let detail_expect_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail_expect_ico")
    /// Image `detail_promise_ico`.
    static let detail_promise_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail_promise_ico")
    /// Image `detail_reason_ico`.
    static let detail_reason_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail_reason_ico")
    /// Image `detail_special_advantage_ico`.
    static let detail_special_advantage_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail_special_advantage_ico")
    /// Image `detail_unknown_ico`.
    static let detail_unknown_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail_unknown_ico")
    /// Image `detail_worry_ico`.
    static let detail_worry_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail_worry_ico")
    /// Image `down`.
    static let down = Rswift.ImageResource(bundle: R.hostingBundle, name: "down")
    /// Image `dxNormal`.
    static let dxNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "dxNormal")
    /// Image `dxSelect`.
    static let dxSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "dxSelect")
    /// Image `emoji`.
    static let emoji = Rswift.ImageResource(bundle: R.hostingBundle, name: "emoji")
    /// Image `emptyImg11`.
    static let emptyImg11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "emptyImg11")
    /// Image `emptyImg22`.
    static let emptyImg22 = Rswift.ImageResource(bundle: R.hostingBundle, name: "emptyImg22")
    /// Image `endBtn`.
    static let endBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "endBtn")
    /// Image `evaluate_cicle_hollow`.
    static let evaluate_cicle_hollow = Rswift.ImageResource(bundle: R.hostingBundle, name: "evaluate_cicle_hollow")
    /// Image `evaluate_cicle_solid`.
    static let evaluate_cicle_solid = Rswift.ImageResource(bundle: R.hostingBundle, name: "evaluate_cicle_solid")
    /// Image `evaluate_star_normal`.
    static let evaluate_star_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "evaluate_star_normal")
    /// Image `evaluate_star_select`.
    static let evaluate_star_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "evaluate_star_select")
    /// Image `evaluate_title`.
    static let evaluate_title = Rswift.ImageResource(bundle: R.hostingBundle, name: "evaluate_title")
    /// Image `fAdded`.
    static let fAdded = Rswift.ImageResource(bundle: R.hostingBundle, name: "fAdded")
    /// Image `fContacts`.
    static let fContacts = Rswift.ImageResource(bundle: R.hostingBundle, name: "fContacts")
    /// Image `fMessage`.
    static let fMessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "fMessage")
    /// Image `fRecording`.
    static let fRecording = Rswift.ImageResource(bundle: R.hostingBundle, name: "fRecording")
    /// Image `face_HL`.
    static let face_HL = Rswift.ImageResource(bundle: R.hostingBundle, name: "face_HL")
    /// Image `face`.
    static let face = Rswift.ImageResource(bundle: R.hostingBundle, name: "face")
    /// Image `filter_cancel_press`.
    static let filter_cancel_press = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_cancel_press")
    /// Image `filter_cancel`.
    static let filter_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_cancel")
    /// Image `filter_ok_press`.
    static let filter_ok_press = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_ok_press")
    /// Image `filter_ok`.
    static let filter_ok = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_ok")
    /// Image `filter_reset_press`.
    static let filter_reset_press = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_reset_press")
    /// Image `filter_reset`.
    static let filter_reset = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_reset")
    /// Image `find`.
    static let find = Rswift.ImageResource(bundle: R.hostingBundle, name: "find")
    /// Image `fire`.
    static let fire = Rswift.ImageResource(bundle: R.hostingBundle, name: "fire")
    /// Image `firstHead`.
    static let firstHead = Rswift.ImageResource(bundle: R.hostingBundle, name: "firstHead")
    /// Image `followP`.
    static let followP = Rswift.ImageResource(bundle: R.hostingBundle, name: "followP")
    /// Image `followProject`.
    static let followProject = Rswift.ImageResource(bundle: R.hostingBundle, name: "followProject")
    /// Image `followR`.
    static let followR = Rswift.ImageResource(bundle: R.hostingBundle, name: "followR")
    /// Image `friend`.
    static let friend = Rswift.ImageResource(bundle: R.hostingBundle, name: "friend")
    /// Image `group_add`.
    static let group_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "group_add")
    /// Image `groups`.
    static let groups = Rswift.ImageResource(bundle: R.hostingBundle, name: "groups")
    /// Image `head`.
    static let head = Rswift.ImageResource(bundle: R.hostingBundle, name: "head")
    /// Image `hebingfenzu`.
    static let hebingfenzu = Rswift.ImageResource(bundle: R.hostingBundle, name: "hebingfenzu")
    /// Image `homeNomal`.
    static let homeNomal = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeNomal")
    /// Image `homeSelect`.
    static let homeSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeSelect")
    /// Image `icon-arrow-left`.
    static let iconArrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-arrow-left")
    /// Image `imageAdd`.
    static let imageAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "imageAdd")
    /// Image `imageDelete`.
    static let imageDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "imageDelete")
    /// Image `input-bar-flat`.
    static let inputBarFlat = Rswift.ImageResource(bundle: R.hostingBundle, name: "input-bar-flat")
    /// Image `isClose_normal`.
    static let isClose_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "isClose_normal")
    /// Image `isClose_select`.
    static let isClose_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "isClose_select")
    /// Image `isOpen_normal`.
    static let isOpen_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "isOpen_normal")
    /// Image `isOpen_select`.
    static let isOpen_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "isOpen_select")
    /// Image `keyboard_HL`.
    static let keyboard_HL = Rswift.ImageResource(bundle: R.hostingBundle, name: "keyboard_HL")
    /// Image `keyboard`.
    static let keyboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "keyboard")
    /// Image `leftArrow`.
    static let leftArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "leftArrow")
    /// Image `left`.
    static let left = Rswift.ImageResource(bundle: R.hostingBundle, name: "left")
    /// Image `logic_disable`.
    static let logic_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "logic_disable")
    /// Image `logic_normal22`.
    static let logic_normal22 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logic_normal22")
    /// Image `logic_normal2`.
    static let logic_normal2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logic_normal2")
    /// Image `logic_normal`.
    static let logic_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "logic_normal")
    /// Image `logic_select22`.
    static let logic_select22 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logic_select22")
    /// Image `logic_select2`.
    static let logic_select2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logic_select2")
    /// Image `logic_select`.
    static let logic_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "logic_select")
    /// Image `login_avatar`.
    static let login_avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_avatar")
    /// Image `login_password`.
    static let login_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_password")
    /// Image `login_username`.
    static let login_username = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_username")
    /// Image `main_badge`.
    static let main_badge = Rswift.ImageResource(bundle: R.hostingBundle, name: "main_badge")
    /// Image `main_bottom_1`.
    static let main_bottom_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "main_bottom_1")
    /// Image `main_bottom_2`.
    static let main_bottom_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "main_bottom_2")
    /// Image `main_bottom_3`.
    static let main_bottom_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "main_bottom_3")
    /// Image `main_bottom_4`.
    static let main_bottom_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "main_bottom_4")
    /// Image `main_bottom_5`.
    static let main_bottom_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "main_bottom_5")
    /// Image `main_bottom_6`.
    static let main_bottom_6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "main_bottom_6")
    /// Image `main_section_0`.
    static let main_section_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "main_section_0")
    /// Image `main_section_1`.
    static let main_section_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "main_section_1")
    /// Image `main_section_2`.
    static let main_section_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "main_section_2")
    /// Image `main_section_3`.
    static let main_section_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "main_section_3")
    /// Image `medals1`.
    static let medals1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "medals1")
    /// Image `medals2`.
    static let medals2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "medals2")
    /// Image `medals3`.
    static let medals3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "medals3")
    /// Image `memberAdd`.
    static let memberAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "memberAdd")
    /// Image `memberDelete`.
    static let memberDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "memberDelete")
    /// Image `menuClose`.
    static let menuClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuClose")
    /// Image `menuCopy`.
    static let menuCopy = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuCopy")
    /// Image `menuDelete`.
    static let menuDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuDelete")
    /// Image `menuTrans`.
    static let menuTrans = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuTrans")
    /// Image `message_book`.
    static let message_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_book")
    /// Image `message_icon`.
    static let message_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_icon")
    /// Image `message_system`.
    static let message_system = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_system")
    /// Image `message`.
    static let message = Rswift.ImageResource(bundle: R.hostingBundle, name: "message")
    /// Image `messagesend`.
    static let messagesend = Rswift.ImageResource(bundle: R.hostingBundle, name: "messagesend")
    /// Image `mineCycle`.
    static let mineCycle = Rswift.ImageResource(bundle: R.hostingBundle, name: "mineCycle")
    /// Image `mineNomal`.
    static let mineNomal = Rswift.ImageResource(bundle: R.hostingBundle, name: "mineNomal")
    /// Image `mineSelect`.
    static let mineSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "mineSelect")
    /// Image `mine_bg`.
    static let mine_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_bg")
    /// Image `mine_change_corp`.
    static let mine_change_corp = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_change_corp")
    /// Image `mine_exit`.
    static let mine_exit = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_exit")
    /// Image `mine_feedBack`.
    static let mine_feedBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_feedBack")
    /// Image `mine_score`.
    static let mine_score = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_score")
    /// Image `mine_share`.
    static let mine_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_share")
    /// Image `more_delete`.
    static let more_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "more_delete")
    /// Image `more_transmit`.
    static let more_transmit = Rswift.ImageResource(bundle: R.hostingBundle, name: "more_transmit")
    /// Image `more`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "more")
    /// Image `mrDelete`.
    static let mrDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "mrDelete")
    /// Image `mrGreen`.
    static let mrGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "mrGreen")
    /// Image `mrOrange`.
    static let mrOrange = Rswift.ImageResource(bundle: R.hostingBundle, name: "mrOrange")
    /// Image `mrPas`.
    static let mrPas = Rswift.ImageResource(bundle: R.hostingBundle, name: "mrPas")
    /// Image `mrPlay`.
    static let mrPlay = Rswift.ImageResource(bundle: R.hostingBundle, name: "mrPlay")
    /// Image `myIcon`.
    static let myIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "myIcon")
    /// Image `myTask`.
    static let myTask = Rswift.ImageResource(bundle: R.hostingBundle, name: "myTask")
    /// Image `my`.
    static let my = Rswift.ImageResource(bundle: R.hostingBundle, name: "my")
    /// Image `nav_add_new`.
    static let nav_add_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_add_new")
    /// Image `nav_back`.
    static let nav_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_back")
    /// Image `nav_customer`.
    static let nav_customer = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_customer")
    /// Image `nav_groupSetting_unable`.
    static let nav_groupSetting_unable = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_groupSetting_unable")
    /// Image `nav_groupSetting`.
    static let nav_groupSetting = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_groupSetting")
    /// Image `nav_more`.
    static let nav_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_more")
    /// Image `nav_search`.
    static let nav_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_search")
    /// Image `nextIcon`.
    static let nextIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "nextIcon")
    /// Image `noChatImg`.
    static let noChatImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "noChatImg")
    /// Image `noDataRemind`.
    static let noDataRemind = Rswift.ImageResource(bundle: R.hostingBundle, name: "noDataRemind")
    /// Image `noData`.
    static let noData = Rswift.ImageResource(bundle: R.hostingBundle, name: "noData")
    /// Image `notPhysical`.
    static let notPhysical = Rswift.ImageResource(bundle: R.hostingBundle, name: "notPhysical")
    /// Image `other_bg`.
    static let other_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "other_bg")
    /// Image `pBottleneckArrow`.
    static let pBottleneckArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "pBottleneckArrow")
    /// Image `pChat`.
    static let pChat = Rswift.ImageResource(bundle: R.hostingBundle, name: "pChat")
    /// Image `pCheckNomal`.
    static let pCheckNomal = Rswift.ImageResource(bundle: R.hostingBundle, name: "pCheckNomal")
    /// Image `pCheckSelect`.
    static let pCheckSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "pCheckSelect")
    /// Image `p_head_back`.
    static let p_head_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_head_back")
    /// Image `p_m_s_amount`.
    static let p_m_s_amount = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_m_s_amount")
    /// Image `p_m_s_analyse_update_time`.
    static let p_m_s_analyse_update_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_m_s_analyse_update_time")
    /// Image `p_m_s_create_time`.
    static let p_m_s_create_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_m_s_create_time")
    /// Image `p_m_s_dealtime`.
    static let p_m_s_dealtime = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_m_s_dealtime")
    /// Image `p_m_s_dep`.
    static let p_m_s_dep = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_m_s_dep")
    /// Image `p_m_s_edittime`.
    static let p_m_s_edittime = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_m_s_edittime")
    /// Image `p_m_s_name`.
    static let p_m_s_name = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_m_s_name")
    /// Image `p_m_s_relation`.
    static let p_m_s_relation = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_m_s_relation")
    /// Image `p_m_s_stage`.
    static let p_m_s_stage = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_m_s_stage")
    /// Image `p_m_s_trade_name`.
    static let p_m_s_trade_name = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_m_s_trade_name")
    /// Image `p_m_s_trade`.
    static let p_m_s_trade = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_m_s_trade")
    /// Image `p_m_s_user`.
    static let p_m_s_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_m_s_user")
    /// Image `p_menu_bottom`.
    static let p_menu_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_menu_bottom")
    /// Image `p_menu_button`.
    static let p_menu_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_menu_button")
    /// Image `p_menu_center`.
    static let p_menu_center = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_menu_center")
    /// Image `p_menu_down`.
    static let p_menu_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_menu_down")
    /// Image `p_menu_hiden_img`.
    static let p_menu_hiden_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_menu_hiden_img")
    /// Image `p_menu_show_img`.
    static let p_menu_show_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_menu_show_img")
    /// Image `p_menu_sort_img`.
    static let p_menu_sort_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_menu_sort_img")
    /// Image `p_menu_stage_img`.
    static let p_menu_stage_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_menu_stage_img")
    /// Image `p_menu_top`.
    static let p_menu_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_menu_top")
    /// Image `p_menu_up`.
    static let p_menu_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_menu_up")
    /// Image `p_people1`.
    static let p_people1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_people1")
    /// Image `p_people2`.
    static let p_people2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_people2")
    /// Image `p_people3`.
    static let p_people3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_people3")
    /// Image `p_people_s1`.
    static let p_people_s1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_people_s1")
    /// Image `p_people_s2`.
    static let p_people_s2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_people_s2")
    /// Image `p_people_s3`.
    static let p_people_s3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_people_s3")
    /// Image `p_show0`.
    static let p_show0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_show0")
    /// Image `p_show1`.
    static let p_show1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_show1")
    /// Image `p_triangle1`.
    static let p_triangle1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_triangle1")
    /// Image `p_triangle2`.
    static let p_triangle2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_triangle2")
    /// Image `p_triangle3`.
    static let p_triangle3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_triangle3")
    /// Image `p_triangle4`.
    static let p_triangle4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_triangle4")
    /// Image `p_triangle5`.
    static let p_triangle5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_triangle5")
    /// Image `p_triangle6`.
    static let p_triangle6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "p_triangle6")
    /// Image `pageNomal`.
    static let pageNomal = Rswift.ImageResource(bundle: R.hostingBundle, name: "pageNomal")
    /// Image `pageSelect`.
    static let pageSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "pageSelect")
    /// Image `pauseBlue`.
    static let pauseBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "pauseBlue")
    /// Image `pauseWhite`.
    static let pauseWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "pauseWhite")
    /// Image `pdf`.
    static let pdf = Rswift.ImageResource(bundle: R.hostingBundle, name: "pdf")
    /// Image `personalCheckNomal`.
    static let personalCheckNomal = Rswift.ImageResource(bundle: R.hostingBundle, name: "personalCheckNomal")
    /// Image `personalCheckSelect`.
    static let personalCheckSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "personalCheckSelect")
    /// Image `photo`.
    static let photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo")
    /// Image `playBlue`.
    static let playBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "playBlue")
    /// Image `playIcon`.
    static let playIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "playIcon")
    /// Image `playWhite`.
    static let playWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "playWhite")
    /// Image `praise_green_ico`.
    static let praise_green_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "praise_green_ico")
    /// Image `praise_ico`.
    static let praise_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "praise_ico")
    /// Image `praiseicon`.
    static let praiseicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "praiseicon")
    /// Image `proFollowAdd`.
    static let proFollowAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "proFollowAdd")
    /// Image `proStart`.
    static let proStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "proStart")
    /// Image `proStop`.
    static let proStop = Rswift.ImageResource(bundle: R.hostingBundle, name: "proStop")
    /// Image `projectAddJian`.
    static let projectAddJian = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectAddJian")
    /// Image `projectNomal`.
    static let projectNomal = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectNomal")
    /// Image `projectS-Nomal0`.
    static let projectSNomal0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectS-Nomal0")
    /// Image `projectS-Nomal1`.
    static let projectSNomal1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectS-Nomal1")
    /// Image `projectS-Nomal2`.
    static let projectSNomal2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectS-Nomal2")
    /// Image `projectS-Nomal3`.
    static let projectSNomal3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectS-Nomal3")
    /// Image `projectS-Nomal4`.
    static let projectSNomal4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectS-Nomal4")
    /// Image `projectS-Nomal5`.
    static let projectSNomal5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectS-Nomal5")
    /// Image `projectS-Select0`.
    static let projectSSelect0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectS-Select0")
    /// Image `projectS-Select1`.
    static let projectSSelect1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectS-Select1")
    /// Image `projectS-Select2`.
    static let projectSSelect2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectS-Select2")
    /// Image `projectS-Select3`.
    static let projectSSelect3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectS-Select3")
    /// Image `projectS-Select4`.
    static let projectSSelect4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectS-Select4")
    /// Image `projectS-Select5`.
    static let projectSSelect5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectS-Select5")
    /// Image `projectSelect`.
    static let projectSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectSelect")
    /// Image `projectSituationBack`.
    static let projectSituationBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectSituationBack")
    /// Image `projectSituationCellTop`.
    static let projectSituationCellTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectSituationCellTop")
    /// Image `projectStar`.
    static let projectStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectStar")
    /// Image `projectUpDown`.
    static let projectUpDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectUpDown")
    /// Image `projectWenHao`.
    static let projectWenHao = Rswift.ImageResource(bundle: R.hostingBundle, name: "projectWenHao")
    /// Image `project_calendar_bottom`.
    static let project_calendar_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "project_calendar_bottom")
    /// Image `project_calendar_top`.
    static let project_calendar_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "project_calendar_top")
    /// Image `project_chanping`.
    static let project_chanping = Rswift.ImageResource(bundle: R.hostingBundle, name: "project_chanping")
    /// Image `project_chooses`.
    static let project_chooses = Rswift.ImageResource(bundle: R.hostingBundle, name: "project_chooses")
    /// Image `project_diaoyan`.
    static let project_diaoyan = Rswift.ImageResource(bundle: R.hostingBundle, name: "project_diaoyan")
    /// Image `project_fangan`.
    static let project_fangan = Rswift.ImageResource(bundle: R.hostingBundle, name: "project_fangan")
    /// Image `project_huodong`.
    static let project_huodong = Rswift.ImageResource(bundle: R.hostingBundle, name: "project_huodong")
    /// Image `project_jishujiaoliu`.
    static let project_jishujiaoliu = Rswift.ImageResource(bundle: R.hostingBundle, name: "project_jishujiaoliu")
    /// Image `project_message`.
    static let project_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "project_message")
    /// Image `project_plan_down`.
    static let project_plan_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "project_plan_down")
    /// Image `project_plan_up`.
    static let project_plan_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "project_plan_up")
    /// Image `project_rili`.
    static let project_rili = Rswift.ImageResource(bundle: R.hostingBundle, name: "project_rili")
    /// Image `project_search_down`.
    static let project_search_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "project_search_down")
    /// Image `project_search_up`.
    static let project_search_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "project_search_up")
    /// Image `project_search`.
    static let project_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "project_search")
    /// Image `project_yangban`.
    static let project_yangban = Rswift.ImageResource(bundle: R.hostingBundle, name: "project_yangban")
    /// Image `promore`.
    static let promore = Rswift.ImageResource(bundle: R.hostingBundle, name: "promore")
    /// Image `pst0`.
    static let pst0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pst0")
    /// Image `pst1`.
    static let pst1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pst1")
    /// Image `pst2`.
    static let pst2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pst2")
    /// Image `pst3`.
    static let pst3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pst3")
    /// Image `pst4`.
    static let pst4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pst4")
    /// Image `pst5`.
    static let pst5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pst5")
    /// Image `pst6`.
    static let pst6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pst6")
    /// Image `pst7`.
    static let pst7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pst7")
    /// Image `pstArrowGreenUp`.
    static let pstArrowGreenUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "pstArrowGreenUp")
    /// Image `pstArrowGreen`.
    static let pstArrowGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "pstArrowGreen")
    /// Image `pstArrow`.
    static let pstArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "pstArrow")
    /// Image `pstDown`.
    static let pstDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "pstDown")
    /// Image `pstMore`.
    static let pstMore = Rswift.ImageResource(bundle: R.hostingBundle, name: "pstMore")
    /// Image `pstPhone`.
    static let pstPhone = Rswift.ImageResource(bundle: R.hostingBundle, name: "pstPhone")
    /// Image `pstUp`.
    static let pstUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "pstUp")
    /// Image `pstY`.
    static let pstY = Rswift.ImageResource(bundle: R.hostingBundle, name: "pstY")
    /// Image `publish-audio`.
    static let publishAudio = Rswift.ImageResource(bundle: R.hostingBundle, name: "publish-audio")
    /// Image `qfMemberAdd`.
    static let qfMemberAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "qfMemberAdd")
    /// Image `qfMemberMins`.
    static let qfMemberMins = Rswift.ImageResource(bundle: R.hostingBundle, name: "qfMemberMins")
    /// Image `qf_activity_img`.
    static let qf_activity_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_activity_img")
    /// Image `qf_address_list_img`.
    static let qf_address_list_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_address_list_img")
    /// Image `qf_alertBackImage`.
    static let qf_alertBackImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_alertBackImage")
    /// Image `qf_alert_line`.
    static let qf_alert_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_alert_line")
    /// Image `qf_alert_xx`.
    static let qf_alert_xx = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_alert_xx")
    /// Image `qf_analysis_duibi`.
    static let qf_analysis_duibi = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_analysis_duibi")
    /// Image `qf_analysis_qushi`.
    static let qf_analysis_qushi = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_analysis_qushi")
    /// Image `qf_baifangtognji`.
    static let qf_baifangtognji = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_baifangtognji")
    /// Image `qf_biaoqianimage`.
    static let qf_biaoqianimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_biaoqianimage")
    /// Image `qf_carry_down_img`.
    static let qf_carry_down_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_carry_down_img")
    /// Image `qf_celvefenxi`.
    static let qf_celvefenxi = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_celvefenxi")
    /// Image `qf_cl_img`.
    static let qf_cl_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_cl_img")
    /// Image `qf_client_img`.
    static let qf_client_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_client_img")
    /// Image `qf_client_pool_img`.
    static let qf_client_pool_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_client_pool_img")
    /// Image `qf_closeVC`.
    static let qf_closeVC = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_closeVC")
    /// Image `qf_close`.
    static let qf_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_close")
    /// Image `qf_clue_img`.
    static let qf_clue_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_clue_img")
    /// Image `qf_clues_circle_img`.
    static let qf_clues_circle_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_clues_circle_img")
    /// Image `qf_compact_img`.
    static let qf_compact_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_compact_img")
    /// Image `qf_consult_img`.
    static let qf_consult_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_consult_img")
    /// Image `qf_contactImage`.
    static let qf_contactImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_contactImage")
    /// Image `qf_contact_img`.
    static let qf_contact_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_contact_img")
    /// Image `qf_depImage`.
    static let qf_depImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_depImage")
    /// Image `qf_down_arrowWhite`.
    static let qf_down_arrowWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_down_arrowWhite")
    /// Image `qf_fengxianfenxi`.
    static let qf_fengxianfenxi = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_fengxianfenxi")
    /// Image `qf_file_img`.
    static let qf_file_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_file_img")
    /// Image `qf_gerenjianjieImage`.
    static let qf_gerenjianjieImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_gerenjianjieImage")
    /// Image `qf_gongzuojingliImage`.
    static let qf_gongzuojingliImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_gongzuojingliImage")
    /// Image `qf_green_right`.
    static let qf_green_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_green_right")
    /// Image `qf_invoice_img`.
    static let qf_invoice_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_invoice_img")
    /// Image `qf_jiaoyujingliImage`.
    static let qf_jiaoyujingliImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_jiaoyujingliImage")
    /// Image `qf_knowledge_base_img`.
    static let qf_knowledge_base_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_knowledge_base_img")
    /// Image `qf_line_green`.
    static let qf_line_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_line_green")
    /// Image `qf_luopanfenxi`.
    static let qf_luopanfenxi = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_luopanfenxi")
    /// Image `qf_nextArrow`.
    static let qf_nextArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_nextArrow")
    /// Image `qf_nodataImage`.
    static let qf_nodataImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_nodataImage")
    /// Image `qf_phoneC`.
    static let qf_phoneC = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_phoneC")
    /// Image `qf_pingjingfenxi`.
    static let qf_pingjingfenxi = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_pingjingfenxi")
    /// Image `qf_product_library_img`.
    static let qf_product_library_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_product_library_img")
    /// Image `qf_project0`.
    static let qf_project0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_project0")
    /// Image `qf_project1`.
    static let qf_project1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_project1")
    /// Image `qf_project2`.
    static let qf_project2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_project2")
    /// Image `qf_project3`.
    static let qf_project3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_project3")
    /// Image `qf_project4`.
    static let qf_project4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_project4")
    /// Image `qf_project5`.
    static let qf_project5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_project5")
    /// Image `qf_project6`.
    static let qf_project6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_project6")
    /// Image `qf_project_fengxianxiang`.
    static let qf_project_fengxianxiang = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_project_fengxianxiang")
    /// Image `qf_project_img`.
    static let qf_project_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_project_img")
    /// Image `qf_project_nextArrow`.
    static let qf_project_nextArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_project_nextArrow")
    /// Image `qf_project_textBack`.
    static let qf_project_textBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_project_textBack")
    /// Image `qf_project_waring`.
    static let qf_project_waring = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_project_waring")
    /// Image `qf_project_xiangmudefen`.
    static let qf_project_xiangmudefen = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_project_xiangmudefen")
    /// Image `qf_project_yingdanzhishu`.
    static let qf_project_yingdanzhishu = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_project_yingdanzhishu")
    /// Image `qf_record_img`.
    static let qf_record_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_record_img")
    /// Image `qf_schedule_img`.
    static let qf_schedule_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_schedule_img")
    /// Image `qf_select_statusalready`.
    static let qf_select_statusalready = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_select_statusalready")
    /// Image `qf_select_statuschoose`.
    static let qf_select_statuschoose = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_select_statuschoose")
    /// Image `qf_select_statusdefault`.
    static let qf_select_statusdefault = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_select_statusdefault")
    /// Image `qf_shangjitongji`.
    static let qf_shangjitongji = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_shangjitongji")
    /// Image `qf_small_class_img`.
    static let qf_small_class_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_small_class_img")
    /// Image `qf_statistics_analyze_img`.
    static let qf_statistics_analyze_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_statistics_analyze_img")
    /// Image `qf_sweep_card_img`.
    static let qf_sweep_card_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_sweep_card_img")
    /// Image `qf_triangle_image`.
    static let qf_triangle_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_triangle_image")
    /// Image `qf_web_back`.
    static let qf_web_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_web_back")
    /// Image `qf_web_next`.
    static let qf_web_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_web_next")
    /// Image `qf_web_refresh`.
    static let qf_web_refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_web_refresh")
    /// Image `qf_xiaoshouloudou`.
    static let qf_xiaoshouloudou = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_xiaoshouloudou")
    /// Image `qf_yejipaihang`.
    static let qf_yejipaihang = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_yejipaihang")
    /// Image `qf_yellow_right`.
    static let qf_yellow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_yellow_right")
    /// Image `qf_zhuzuoImage`.
    static let qf_zhuzuoImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "qf_zhuzuoImage")
    /// Image `qfphoneadd`.
    static let qfphoneadd = Rswift.ImageResource(bundle: R.hostingBundle, name: "qfphoneadd")
    /// Image `qfphonedel`.
    static let qfphonedel = Rswift.ImageResource(bundle: R.hostingBundle, name: "qfphonedel")
    /// Image `qichacha`.
    static let qichacha = Rswift.ImageResource(bundle: R.hostingBundle, name: "qichacha")
    /// Image `rEnd`.
    static let rEnd = Rswift.ImageResource(bundle: R.hostingBundle, name: "rEnd")
    /// Image `rPlay`.
    static let rPlay = Rswift.ImageResource(bundle: R.hostingBundle, name: "rPlay")
    /// Image `rStop`.
    static let rStop = Rswift.ImageResource(bundle: R.hostingBundle, name: "rStop")
    /// Image `rankingImage1`.
    static let rankingImage1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rankingImage1")
    /// Image `rankingImage2`.
    static let rankingImage2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rankingImage2")
    /// Image `rankingImage3`.
    static let rankingImage3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rankingImage3")
    /// Image `rankingImage4`.
    static let rankingImage4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rankingImage4")
    /// Image `reSend`.
    static let reSend = Rswift.ImageResource(bundle: R.hostingBundle, name: "reSend")
    /// Image `rightArrow24`.
    static let rightArrow24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rightArrow24")
    /// Image `rightArrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "rightArrow")
    /// Image `rightArrows`.
    static let rightArrows = Rswift.ImageResource(bundle: R.hostingBundle, name: "rightArrows")
    /// Image `right`.
    static let right = Rswift.ImageResource(bundle: R.hostingBundle, name: "right")
    /// Image `scheduleAdd`.
    static let scheduleAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "scheduleAdd")
    /// Image `sdRefeshView_arrow`.
    static let sdRefeshView_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "sdRefeshView_arrow")
    /// Image `searchBtn`.
    static let searchBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchBtn")
    /// Image `search_gray`.
    static let search_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_gray")
    /// Image `search_white`.
    static let search_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_white")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `select_photo`.
    static let select_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "select_photo")
    /// Image `shareBottomBackground`.
    static let shareBottomBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "shareBottomBackground")
    /// Image `shareIcon`.
    static let shareIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "shareIcon")
    /// Image `share_mail`.
    static let share_mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_mail")
    /// Image `share_msg`.
    static let share_msg = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_msg")
    /// Image `share_qq`.
    static let share_qq = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_qq")
    /// Image `share_wechat`.
    static let share_wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_wechat")
    /// Image `shutterstock`.
    static let shutterstock = Rswift.ImageResource(bundle: R.hostingBundle, name: "shutterstock")
    /// Image `situationCellmarkNomal`.
    static let situationCellmarkNomal = Rswift.ImageResource(bundle: R.hostingBundle, name: "situationCellmarkNomal")
    /// Image `situationCellmarkSelect`.
    static let situationCellmarkSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "situationCellmarkSelect")
    /// Image `sl_cloud`.
    static let sl_cloud = Rswift.ImageResource(bundle: R.hostingBundle, name: "sl_cloud")
    /// Image `sliderWhite`.
    static let sliderWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "sliderWhite")
    /// Image `slider`.
    static let slider = Rswift.ImageResource(bundle: R.hostingBundle, name: "slider")
    /// Image `smallHeadG`.
    static let smallHeadG = Rswift.ImageResource(bundle: R.hostingBundle, name: "smallHeadG")
    /// Image `smallHead`.
    static let smallHead = Rswift.ImageResource(bundle: R.hostingBundle, name: "smallHead")
    /// Image `star_normal_left`.
    static let star_normal_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_normal_left")
    /// Image `star_normal_right`.
    static let star_normal_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_normal_right")
    /// Image `star_normal`.
    static let star_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_normal")
    /// Image `star_select_left`.
    static let star_select_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_select_left")
    /// Image `star_select_right`.
    static let star_select_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_select_right")
    /// Image `star_select`.
    static let star_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_select")
    /// Image `subtractMember_highlighted`.
    static let subtractMember_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "subtractMember_highlighted")
    /// Image `subtractMember_normal`.
    static let subtractMember_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "subtractMember_normal")
    /// Image `switch_normal`.
    static let switch_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "switch_normal")
    /// Image `switch_select`.
    static let switch_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "switch_select")
    /// Image `tab_main_normal`.
    static let tab_main_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_main_normal")
    /// Image `tab_main_selected`.
    static let tab_main_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_main_selected")
    /// Image `tab_mine_normal`.
    static let tab_mine_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_mine_normal")
    /// Image `tab_mine_selected`.
    static let tab_mine_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_mine_selected")
    /// Image `tableSearch`.
    static let tableSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "tableSearch")
    /// Image `talkFenxiBaoGao`.
    static let talkFenxiBaoGao = Rswift.ImageResource(bundle: R.hostingBundle, name: "talkFenxiBaoGao")
    /// Image `talkYuYinBeiwang`.
    static let talkYuYinBeiwang = Rswift.ImageResource(bundle: R.hostingBundle, name: "talkYuYinBeiwang")
    /// Image `theme_delete_highlighted`.
    static let theme_delete_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "theme_delete_highlighted")
    /// Image `theme_delete`.
    static let theme_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "theme_delete")
    /// Image `theme_dismiss`.
    static let theme_dismiss = Rswift.ImageResource(bundle: R.hostingBundle, name: "theme_dismiss")
    /// Image `theme_edit`.
    static let theme_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "theme_edit")
    /// Image `theme_quit`.
    static let theme_quit = Rswift.ImageResource(bundle: R.hostingBundle, name: "theme_quit")
    /// Image `theme_rightArrow`.
    static let theme_rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "theme_rightArrow")
    /// Image `theme_setTop`.
    static let theme_setTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "theme_setTop")
    /// Image `theme_transmit_big`.
    static let theme_transmit_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "theme_transmit_big")
    /// Image `theme_transmit`.
    static let theme_transmit = Rswift.ImageResource(bundle: R.hostingBundle, name: "theme_transmit")
    /// Image `theme`.
    static let theme = Rswift.ImageResource(bundle: R.hostingBundle, name: "theme")
    /// Image `time`.
    static let time = Rswift.ImageResource(bundle: R.hostingBundle, name: "time")
    /// Image `tome`.
    static let tome = Rswift.ImageResource(bundle: R.hostingBundle, name: "tome")
    /// Image `unBing0`.
    static let unBing0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "unBing0")
    /// Image `unBing1`.
    static let unBing1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "unBing1")
    /// Image `unBing2`.
    static let unBing2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "unBing2")
    /// Image `upArrow`.
    static let upArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "upArrow")
    /// Image `up`.
    static let up = Rswift.ImageResource(bundle: R.hostingBundle, name: "up")
    /// Image `visit_evaluate_top_back`.
    static let visit_evaluate_top_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "visit_evaluate_top_back")
    /// Image `voiceL1`.
    static let voiceL1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voiceL1")
    /// Image `voiceL2`.
    static let voiceL2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voiceL2")
    /// Image `voiceL3`.
    static let voiceL3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voiceL3")
    /// Image `voiceR1`.
    static let voiceR1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voiceR1")
    /// Image `voiceR2`.
    static let voiceR2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voiceR2")
    /// Image `voiceR3`.
    static let voiceR3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voiceR3")
    /// Image `voice`.
    static let voice = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice")
    /// Image `workbenchNomal`.
    static let workbenchNomal = Rswift.ImageResource(bundle: R.hostingBundle, name: "workbenchNomal")
    /// Image `workbenchSelect`.
    static let workbenchSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "workbenchSelect")
    /// Image `x`.
    static let x = Rswift.ImageResource(bundle: R.hostingBundle, name: "x")
    /// Image `xljm14`.
    static let xljm14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "xljm14")
    /// Image `xljm5_Nomal`.
    static let xljm5_Nomal = Rswift.ImageResource(bundle: R.hostingBundle, name: "xljm5_Nomal")
    /// Image `xljm5_Select`.
    static let xljm5_Select = Rswift.ImageResource(bundle: R.hostingBundle, name: "xljm5_Select")
    /// Image `xljm5`.
    static let xljm5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "xljm5")
    /// Image `xljm6_Nomal`.
    static let xljm6_Nomal = Rswift.ImageResource(bundle: R.hostingBundle, name: "xljm6_Nomal")
    /// Image `xljm6_Select`.
    static let xljm6_Select = Rswift.ImageResource(bundle: R.hostingBundle, name: "xljm6_Select")
    /// Image `yuyin`.
    static let yuyin = Rswift.ImageResource(bundle: R.hostingBundle, name: "yuyin")
    /// Image `zhangkaifenzu`.
    static let zhangkaifenzu = Rswift.ImageResource(bundle: R.hostingBundle, name: "zhangkaifenzu")
    /// Image `二维码`.
    static let 二维码 = Rswift.ImageResource(bundle: R.hostingBundle, name: "二维码")
    /// Image `小花_normal`.
    static let 小花_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "小花_normal")
    /// Image `小花_select`.
    static let 小花_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "小花_select")
    /// Image `表情_normal`.
    static let 表情_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "表情_normal")
    /// Image `表情_select`.
    static let 表情_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "表情_select")
    /// Image `铃铛_normal`.
    static let 铃铛_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "铃铛_normal")
    /// Image `铃铛_select`.
    static let 铃铛_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "铃铛_select")
    
    /// `UIImage(named: "AlbumComment", bundle: ..., traitCollection: ...)`
    static func albumComment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.albumComment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "AlbumOperateMore", bundle: ..., traitCollection: ...)`
    static func albumOperateMore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.albumOperateMore, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "AlbumOperateMoreHL", bundle: ..., traitCollection: ...)`
    static func albumOperateMoreHL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.albumOperateMoreHL, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Arrow", bundle: ..., traitCollection: ...)`
    static func arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CoachPay", bundle: ..., traitCollection: ...)`
    static func coachPay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coachPay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CoachPayGray", bundle: ..., traitCollection: ...)`
    static func coachPayGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coachPayGray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Delete_ios7", bundle: ..., traitCollection: ...)`
    static func delete_ios7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_ios7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "HomeAdd", bundle: ..., traitCollection: ...)`
    static func homeAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeAdd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "HomeAnalysis", bundle: ..., traitCollection: ...)`
    static func homeAnalysis(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeAnalysis, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "HomeMessage", bundle: ..., traitCollection: ...)`
    static func homeMessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeMessage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "HomeSearch", bundle: ..., traitCollection: ...)`
    static func homeSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeSearch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "HomeWorkCycle", bundle: ..., traitCollection: ...)`
    static func homeWorkCycle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeWorkCycle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Like", bundle: ..., traitCollection: ...)`
    static func like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LikeCmtBg", bundle: ..., traitCollection: ...)`
    static func likeCmtBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeCmtBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MineBackImage", bundle: ..., traitCollection: ...)`
    static func mineBackImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mineBackImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ProPeopleIcon", bundle: ..., traitCollection: ...)`
    static func proPeopleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.proPeopleIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Proappointment", bundle: ..., traitCollection: ...)`
    static func proappointment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.proappointment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QFBatchMessage", bundle: ..., traitCollection: ...)`
    static func qfBatchMessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qfBatchMessage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QFBatchMove", bundle: ..., traitCollection: ...)`
    static func qfBatchMove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qfBatchMove, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QFCheckDefaultImage", bundle: ..., traitCollection: ...)`
    static func qfCheckDefaultImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qfCheckDefaultImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QFCheckDep", bundle: ..., traitCollection: ...)`
    static func qfCheckDep(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qfCheckDep, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QFContactshut", bundle: ..., traitCollection: ...)`
    static func qfContactshut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qfContactshut, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QFMoreImage", bundle: ..., traitCollection: ...)`
    static func qfMoreImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qfMoreImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QF_Tag_Blue", bundle: ..., traitCollection: ...)`
    static func qf_Tag_Blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_Tag_Blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QF_Tag_DarkGreen", bundle: ..., traitCollection: ...)`
    static func qf_Tag_DarkGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_Tag_DarkGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QF_Tag_LightGreen", bundle: ..., traitCollection: ...)`
    static func qf_Tag_LightGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_Tag_LightGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QF_Tag_Red", bundle: ..., traitCollection: ...)`
    static func qf_Tag_Red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_Tag_Red, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QF_Tag_Yellow", bundle: ..., traitCollection: ...)`
    static func qf_Tag_Yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_Tag_Yellow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QFnoCheckDep", bundle: ..., traitCollection: ...)`
    static func qFnoCheckDep(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qFnoCheckDep, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QFxufuaniu", bundle: ..., traitCollection: ...)`
    static func qFxufuaniu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qFxufuaniu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QuickClient", bundle: ..., traitCollection: ...)`
    static func quickClient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.quickClient, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QuickCoach", bundle: ..., traitCollection: ...)`
    static func quickCoach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.quickCoach, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QuickContant", bundle: ..., traitCollection: ...)`
    static func quickContant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.quickContant, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QuickProject", bundle: ..., traitCollection: ...)`
    static func quickProject(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.quickProject, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TimelineAction", bundle: ..., traitCollection: ...)`
    static func timelineAction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timelineAction, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TimelineAnalyse", bundle: ..., traitCollection: ...)`
    static func timelineAnalyse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timelineAnalyse, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TreeViewDirectLinesButton", bundle: ..., traitCollection: ...)`
    static func treeViewDirectLinesButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.treeViewDirectLinesButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TreeViewOrthogonalLinesButton", bundle: ..., traitCollection: ...)`
    static func treeViewOrthogonalLinesButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.treeViewOrthogonalLinesButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TreeViewSubtreeCollapsedButton", bundle: ..., traitCollection: ...)`
    static func treeViewSubtreeCollapsedButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.treeViewSubtreeCollapsedButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TreeViewSubtreeExpandedButton", bundle: ..., traitCollection: ...)`
    static func treeViewSubtreeExpandedButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.treeViewSubtreeExpandedButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "addCoach", bundle: ..., traitCollection: ...)`
    static func addCoach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addCoach, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "addMember_highlighted", bundle: ..., traitCollection: ...)`
    static func addMember_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addMember_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "addMember_normal", bundle: ..., traitCollection: ...)`
    static func addMember_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addMember_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add_emoj_default", bundle: ..., traitCollection: ...)`
    static func add_emoj_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_emoj_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add_emoj_focus", bundle: ..., traitCollection: ...)`
    static func add_emoj_focus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_emoj_focus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "aiRecommend", bundle: ..., traitCollection: ...)`
    static func aiRecommend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aiRecommend, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "aiRemind", bundle: ..., traitCollection: ...)`
    static func aiRemind(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aiRemind, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "analysisProblemCenter", bundle: ..., traitCollection: ...)`
    static func analysisProblemCenter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.analysisProblemCenter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "analysisProblemLeft", bundle: ..., traitCollection: ...)`
    static func analysisProblemLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.analysisProblemLeft, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "analysisProblemRight", bundle: ..., traitCollection: ...)`
    static func analysisProblemRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.analysisProblemRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrowWhite", bundle: ..., traitCollection: ...)`
    static func arrowWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "at_default", bundle: ..., traitCollection: ...)`
    static func at_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.at_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "at_focus", bundle: ..., traitCollection: ...)`
    static func at_focus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.at_focus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backColor", bundle: ..., traitCollection: ...)`
    static func backColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backColor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backLog", bundle: ..., traitCollection: ...)`
    static func backLog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backLog, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backWhite", bundle: ..., traitCollection: ...)`
    static func backWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "batchDep", bundle: ..., traitCollection: ...)`
    static func batchDep(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.batchDep, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bind_acount", bundle: ..., traitCollection: ...)`
    static func bind_acount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_acount, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bing0", bundle: ..., traitCollection: ...)`
    static func bing0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bing0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bing1", bundle: ..., traitCollection: ...)`
    static func bing1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bing1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bing2", bundle: ..., traitCollection: ...)`
    static func bing2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bing2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cName", bundle: ..., traitCollection: ...)`
    static func cName(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cName, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cPeople", bundle: ..., traitCollection: ...)`
    static func cPeople(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cPeople, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cPhone", bundle: ..., traitCollection: ...)`
    static func cPhone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cPhone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cPosition", bundle: ..., traitCollection: ...)`
    static func cPosition(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cPosition, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cSanjiao", bundle: ..., traitCollection: ...)`
    static func cSanjiao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cSanjiao, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cTrade", bundle: ..., traitCollection: ...)`
    static func cTrade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cTrade, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "calendar", bundle: ..., traitCollection: ...)`
    static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "car_normal", bundle: ..., traitCollection: ...)`
    static func car_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.car_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "car_select", bundle: ..., traitCollection: ...)`
    static func car_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.car_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "carryDelete", bundle: ..., traitCollection: ...)`
    static func carryDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carryDelete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "carryDown", bundle: ..., traitCollection: ...)`
    static func carryDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carryDown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_about_us_ico", bundle: ..., traitCollection: ...)`
    static func ch_about_us_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_about_us_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_add_product_icon", bundle: ..., traitCollection: ...)`
    static func ch_add_product_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_add_product_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_call_phone", bundle: ..., traitCollection: ...)`
    static func ch_call_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_call_phone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_contact_detail_email", bundle: ..., traitCollection: ...)`
    static func ch_contact_detail_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_contact_detail_email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_contact_detail_phone", bundle: ..., traitCollection: ...)`
    static func ch_contact_detail_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_contact_detail_phone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_contact_dimission", bundle: ..., traitCollection: ...)`
    static func ch_contact_dimission(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_contact_dimission, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_contact_return", bundle: ..., traitCollection: ...)`
    static func ch_contact_return(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_contact_return, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_corp_administration_ico", bundle: ..., traitCollection: ...)`
    static func ch_corp_administration_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_corp_administration_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_delete_ico", bundle: ..., traitCollection: ...)`
    static func ch_delete_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_delete_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_div_right_new", bundle: ..., traitCollection: ...)`
    static func ch_div_right_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_div_right_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_growth_map_ico", bundle: ..., traitCollection: ...)`
    static func ch_growth_map_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_growth_map_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_image_home", bundle: ..., traitCollection: ...)`
    static func ch_image_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_image_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_invited_join_ico", bundle: ..., traitCollection: ...)`
    static func ch_invited_join_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_invited_join_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_message_center_ico", bundle: ..., traitCollection: ...)`
    static func ch_message_center_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_message_center_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_product_edit_icon", bundle: ..., traitCollection: ...)`
    static func ch_product_edit_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_product_edit_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_product_item_icon", bundle: ..., traitCollection: ...)`
    static func ch_product_item_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_product_item_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_project_detail_base_state_1", bundle: ..., traitCollection: ...)`
    static func ch_project_detail_base_state_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_project_detail_base_state_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_project_detail_base_state_2", bundle: ..., traitCollection: ...)`
    static func ch_project_detail_base_state_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_project_detail_base_state_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_project_detail_base_state_3", bundle: ..., traitCollection: ...)`
    static func ch_project_detail_base_state_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_project_detail_base_state_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_project_detail_base_state_4", bundle: ..., traitCollection: ...)`
    static func ch_project_detail_base_state_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_project_detail_base_state_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_project_detail_base_state_5", bundle: ..., traitCollection: ...)`
    static func ch_project_detail_base_state_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_project_detail_base_state_5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_project_stage_icon1", bundle: ..., traitCollection: ...)`
    static func ch_project_stage_icon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_project_stage_icon1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_project_stage_icon2", bundle: ..., traitCollection: ...)`
    static func ch_project_stage_icon2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_project_stage_icon2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_project_stage_icon3", bundle: ..., traitCollection: ...)`
    static func ch_project_stage_icon3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_project_stage_icon3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_project_stage_icon4", bundle: ..., traitCollection: ...)`
    static func ch_project_stage_icon4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_project_stage_icon4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_project_stage_icon5", bundle: ..., traitCollection: ...)`
    static func ch_project_stage_icon5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_project_stage_icon5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_protrait_green", bundle: ..., traitCollection: ...)`
    static func ch_protrait_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_protrait_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ch_protrait_grey", bundle: ..., traitCollection: ...)`
    static func ch_protrait_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch_protrait_grey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "changeBtn", bundle: ..., traitCollection: ...)`
    static func changeBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.changeBtn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "changeStage", bundle: ..., traitCollection: ...)`
    static func changeStage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.changeStage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "changeStage_selected", bundle: ..., traitCollection: ...)`
    static func changeStage_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.changeStage_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_normal", bundle: ..., traitCollection: ...)`
    static func checkbox_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_selected", bundle: ..., traitCollection: ...)`
    static func checkbox_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chooseDown", bundle: ..., traitCollection: ...)`
    static func chooseDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chooseDown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chooseUp", bundle: ..., traitCollection: ...)`
    static func chooseUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chooseUp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "circle_normal", bundle: ..., traitCollection: ...)`
    static func circle_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "circle_select", bundle: ..., traitCollection: ...)`
    static func circle_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "class", bundle: ..., traitCollection: ...)`
    static func `class`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`class`, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "clear", bundle: ..., traitCollection: ...)`
    static func clear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clear, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cloud", bundle: ..., traitCollection: ...)`
    static func cloud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloud, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cloudRight", bundle: ..., traitCollection: ...)`
    static func cloudRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloudRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "coach", bundle: ..., traitCollection: ...)`
    static func coach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coach, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "combobox", bundle: ..., traitCollection: ...)`
    static func combobox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.combobox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "comment_ico", bundle: ..., traitCollection: ...)`
    static func comment_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "comment_write_icon", bundle: ..., traitCollection: ...)`
    static func comment_write_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment_write_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "commenticon", bundle: ..., traitCollection: ...)`
    static func commenticon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commenticon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "consult_message_ico", bundle: ..., traitCollection: ...)`
    static func consult_message_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.consult_message_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "contactIcon", bundle: ..., traitCollection: ...)`
    static func contactIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "contact_company", bundle: ..., traitCollection: ...)`
    static func contact_company(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contact_company, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "contact_down", bundle: ..., traitCollection: ...)`
    static func contact_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contact_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "contact_email", bundle: ..., traitCollection: ...)`
    static func contact_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contact_email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "contact_tel", bundle: ..., traitCollection: ...)`
    static func contact_tel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contact_tel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "contact_up", bundle: ..., traitCollection: ...)`
    static func contact_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contact_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "continueBlue", bundle: ..., traitCollection: ...)`
    static func continueBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.continueBlue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "continueWhite", bundle: ..., traitCollection: ...)`
    static func continueWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.continueWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "creater", bundle: ..., traitCollection: ...)`
    static func creater(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.creater, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "crown1", bundle: ..., traitCollection: ...)`
    static func crown1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crown1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "crown2", bundle: ..., traitCollection: ...)`
    static func crown2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crown2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "crown3", bundle: ..., traitCollection: ...)`
    static func crown3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crown3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "customer_call", bundle: ..., traitCollection: ...)`
    static func customer_call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.customer_call, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "customer_call_selected", bundle: ..., traitCollection: ...)`
    static func customer_call_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.customer_call_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "customer_edit", bundle: ..., traitCollection: ...)`
    static func customer_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.customer_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dashboardNomal", bundle: ..., traitCollection: ...)`
    static func dashboardNomal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dashboardNomal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dashboardSelect", bundle: ..., traitCollection: ...)`
    static func dashboardSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dashboardSelect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "date", bundle: ..., traitCollection: ...)`
    static func date(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.date, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "defaultImage", bundle: ..., traitCollection: ...)`
    static func defaultImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defaultImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "delect", bundle: ..., traitCollection: ...)`
    static func delect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "deleteSure", bundle: ..., traitCollection: ...)`
    static func deleteSure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deleteSure, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "detail_action_ico", bundle: ..., traitCollection: ...)`
    static func detail_action_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detail_action_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "detail_basedetail_ico", bundle: ..., traitCollection: ...)`
    static func detail_basedetail_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detail_basedetail_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "detail_communic_ation_ico", bundle: ..., traitCollection: ...)`
    static func detail_communic_ation_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detail_communic_ation_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "detail_expect_ico", bundle: ..., traitCollection: ...)`
    static func detail_expect_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detail_expect_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "detail_promise_ico", bundle: ..., traitCollection: ...)`
    static func detail_promise_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detail_promise_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "detail_reason_ico", bundle: ..., traitCollection: ...)`
    static func detail_reason_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detail_reason_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "detail_special_advantage_ico", bundle: ..., traitCollection: ...)`
    static func detail_special_advantage_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detail_special_advantage_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "detail_unknown_ico", bundle: ..., traitCollection: ...)`
    static func detail_unknown_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detail_unknown_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "detail_worry_ico", bundle: ..., traitCollection: ...)`
    static func detail_worry_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detail_worry_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "down", bundle: ..., traitCollection: ...)`
    static func down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dxNormal", bundle: ..., traitCollection: ...)`
    static func dxNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dxNormal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dxSelect", bundle: ..., traitCollection: ...)`
    static func dxSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dxSelect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "emoji", bundle: ..., traitCollection: ...)`
    static func emoji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emoji, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "emptyImg11", bundle: ..., traitCollection: ...)`
    static func emptyImg11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyImg11, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "emptyImg22", bundle: ..., traitCollection: ...)`
    static func emptyImg22(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyImg22, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "endBtn", bundle: ..., traitCollection: ...)`
    static func endBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.endBtn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "evaluate_cicle_hollow", bundle: ..., traitCollection: ...)`
    static func evaluate_cicle_hollow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.evaluate_cicle_hollow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "evaluate_cicle_solid", bundle: ..., traitCollection: ...)`
    static func evaluate_cicle_solid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.evaluate_cicle_solid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "evaluate_star_normal", bundle: ..., traitCollection: ...)`
    static func evaluate_star_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.evaluate_star_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "evaluate_star_select", bundle: ..., traitCollection: ...)`
    static func evaluate_star_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.evaluate_star_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "evaluate_title", bundle: ..., traitCollection: ...)`
    static func evaluate_title(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.evaluate_title, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fAdded", bundle: ..., traitCollection: ...)`
    static func fAdded(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fAdded, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fContacts", bundle: ..., traitCollection: ...)`
    static func fContacts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fContacts, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fMessage", bundle: ..., traitCollection: ...)`
    static func fMessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fMessage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fRecording", bundle: ..., traitCollection: ...)`
    static func fRecording(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fRecording, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "face", bundle: ..., traitCollection: ...)`
    static func face(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.face, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "face_HL", bundle: ..., traitCollection: ...)`
    static func face_HL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.face_HL, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "filter_cancel", bundle: ..., traitCollection: ...)`
    static func filter_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_cancel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "filter_cancel_press", bundle: ..., traitCollection: ...)`
    static func filter_cancel_press(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_cancel_press, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "filter_ok", bundle: ..., traitCollection: ...)`
    static func filter_ok(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_ok, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "filter_ok_press", bundle: ..., traitCollection: ...)`
    static func filter_ok_press(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_ok_press, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "filter_reset", bundle: ..., traitCollection: ...)`
    static func filter_reset(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_reset, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "filter_reset_press", bundle: ..., traitCollection: ...)`
    static func filter_reset_press(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_reset_press, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "find", bundle: ..., traitCollection: ...)`
    static func find(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.find, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fire", bundle: ..., traitCollection: ...)`
    static func fire(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fire, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "firstHead", bundle: ..., traitCollection: ...)`
    static func firstHead(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.firstHead, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "followP", bundle: ..., traitCollection: ...)`
    static func followP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.followP, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "followProject", bundle: ..., traitCollection: ...)`
    static func followProject(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.followProject, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "followR", bundle: ..., traitCollection: ...)`
    static func followR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.followR, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "friend", bundle: ..., traitCollection: ...)`
    static func friend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friend, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "group_add", bundle: ..., traitCollection: ...)`
    static func group_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "groups", bundle: ..., traitCollection: ...)`
    static func groups(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.groups, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "head", bundle: ..., traitCollection: ...)`
    static func head(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.head, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hebingfenzu", bundle: ..., traitCollection: ...)`
    static func hebingfenzu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hebingfenzu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "homeNomal", bundle: ..., traitCollection: ...)`
    static func homeNomal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeNomal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "homeSelect", bundle: ..., traitCollection: ...)`
    static func homeSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeSelect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-arrow-left", bundle: ..., traitCollection: ...)`
    static func iconArrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconArrowLeft, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "imageAdd", bundle: ..., traitCollection: ...)`
    static func imageAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageAdd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "imageDelete", bundle: ..., traitCollection: ...)`
    static func imageDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageDelete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "input-bar-flat", bundle: ..., traitCollection: ...)`
    static func inputBarFlat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inputBarFlat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "isClose_normal", bundle: ..., traitCollection: ...)`
    static func isClose_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.isClose_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "isClose_select", bundle: ..., traitCollection: ...)`
    static func isClose_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.isClose_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "isOpen_normal", bundle: ..., traitCollection: ...)`
    static func isOpen_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.isOpen_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "isOpen_select", bundle: ..., traitCollection: ...)`
    static func isOpen_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.isOpen_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "keyboard", bundle: ..., traitCollection: ...)`
    static func keyboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.keyboard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "keyboard_HL", bundle: ..., traitCollection: ...)`
    static func keyboard_HL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.keyboard_HL, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "left", bundle: ..., traitCollection: ...)`
    static func left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "leftArrow", bundle: ..., traitCollection: ...)`
    static func leftArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leftArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logic_disable", bundle: ..., traitCollection: ...)`
    static func logic_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logic_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logic_normal", bundle: ..., traitCollection: ...)`
    static func logic_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logic_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logic_normal2", bundle: ..., traitCollection: ...)`
    static func logic_normal2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logic_normal2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logic_normal22", bundle: ..., traitCollection: ...)`
    static func logic_normal22(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logic_normal22, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logic_select", bundle: ..., traitCollection: ...)`
    static func logic_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logic_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logic_select2", bundle: ..., traitCollection: ...)`
    static func logic_select2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logic_select2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logic_select22", bundle: ..., traitCollection: ...)`
    static func logic_select22(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logic_select22, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_avatar", bundle: ..., traitCollection: ...)`
    static func login_avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_avatar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_password", bundle: ..., traitCollection: ...)`
    static func login_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_password, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_username", bundle: ..., traitCollection: ...)`
    static func login_username(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_username, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "main_badge", bundle: ..., traitCollection: ...)`
    static func main_badge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_badge, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "main_bottom_1", bundle: ..., traitCollection: ...)`
    static func main_bottom_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_bottom_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "main_bottom_2", bundle: ..., traitCollection: ...)`
    static func main_bottom_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_bottom_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "main_bottom_3", bundle: ..., traitCollection: ...)`
    static func main_bottom_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_bottom_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "main_bottom_4", bundle: ..., traitCollection: ...)`
    static func main_bottom_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_bottom_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "main_bottom_5", bundle: ..., traitCollection: ...)`
    static func main_bottom_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_bottom_5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "main_bottom_6", bundle: ..., traitCollection: ...)`
    static func main_bottom_6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_bottom_6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "main_section_0", bundle: ..., traitCollection: ...)`
    static func main_section_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_section_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "main_section_1", bundle: ..., traitCollection: ...)`
    static func main_section_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_section_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "main_section_2", bundle: ..., traitCollection: ...)`
    static func main_section_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_section_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "main_section_3", bundle: ..., traitCollection: ...)`
    static func main_section_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_section_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "medals1", bundle: ..., traitCollection: ...)`
    static func medals1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.medals1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "medals2", bundle: ..., traitCollection: ...)`
    static func medals2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.medals2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "medals3", bundle: ..., traitCollection: ...)`
    static func medals3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.medals3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "memberAdd", bundle: ..., traitCollection: ...)`
    static func memberAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberAdd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "memberDelete", bundle: ..., traitCollection: ...)`
    static func memberDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberDelete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menuClose", bundle: ..., traitCollection: ...)`
    static func menuClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menuCopy", bundle: ..., traitCollection: ...)`
    static func menuCopy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuCopy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menuDelete", bundle: ..., traitCollection: ...)`
    static func menuDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuDelete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menuTrans", bundle: ..., traitCollection: ...)`
    static func menuTrans(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuTrans, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "message", bundle: ..., traitCollection: ...)`
    static func message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "message_book", bundle: ..., traitCollection: ...)`
    static func message_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_book, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "message_icon", bundle: ..., traitCollection: ...)`
    static func message_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "message_system", bundle: ..., traitCollection: ...)`
    static func message_system(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_system, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "messagesend", bundle: ..., traitCollection: ...)`
    static func messagesend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagesend, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mineCycle", bundle: ..., traitCollection: ...)`
    static func mineCycle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mineCycle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mineNomal", bundle: ..., traitCollection: ...)`
    static func mineNomal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mineNomal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mineSelect", bundle: ..., traitCollection: ...)`
    static func mineSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mineSelect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine_bg", bundle: ..., traitCollection: ...)`
    static func mine_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine_change_corp", bundle: ..., traitCollection: ...)`
    static func mine_change_corp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_change_corp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine_exit", bundle: ..., traitCollection: ...)`
    static func mine_exit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_exit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine_feedBack", bundle: ..., traitCollection: ...)`
    static func mine_feedBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_feedBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine_score", bundle: ..., traitCollection: ...)`
    static func mine_score(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_score, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine_share", bundle: ..., traitCollection: ...)`
    static func mine_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more_delete", bundle: ..., traitCollection: ...)`
    static func more_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more_transmit", bundle: ..., traitCollection: ...)`
    static func more_transmit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more_transmit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mrDelete", bundle: ..., traitCollection: ...)`
    static func mrDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mrDelete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mrGreen", bundle: ..., traitCollection: ...)`
    static func mrGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mrGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mrOrange", bundle: ..., traitCollection: ...)`
    static func mrOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mrOrange, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mrPas", bundle: ..., traitCollection: ...)`
    static func mrPas(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mrPas, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mrPlay", bundle: ..., traitCollection: ...)`
    static func mrPlay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mrPlay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my", bundle: ..., traitCollection: ...)`
    static func my(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "myIcon", bundle: ..., traitCollection: ...)`
    static func myIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "myTask", bundle: ..., traitCollection: ...)`
    static func myTask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myTask, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_add_new", bundle: ..., traitCollection: ...)`
    static func nav_add_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_add_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_back", bundle: ..., traitCollection: ...)`
    static func nav_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_customer", bundle: ..., traitCollection: ...)`
    static func nav_customer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_customer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_groupSetting", bundle: ..., traitCollection: ...)`
    static func nav_groupSetting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_groupSetting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_groupSetting_unable", bundle: ..., traitCollection: ...)`
    static func nav_groupSetting_unable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_groupSetting_unable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_more", bundle: ..., traitCollection: ...)`
    static func nav_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_search", bundle: ..., traitCollection: ...)`
    static func nav_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nextIcon", bundle: ..., traitCollection: ...)`
    static func nextIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nextIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "noChatImg", bundle: ..., traitCollection: ...)`
    static func noChatImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noChatImg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "noData", bundle: ..., traitCollection: ...)`
    static func noData(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noData, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "noDataRemind", bundle: ..., traitCollection: ...)`
    static func noDataRemind(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noDataRemind, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "notPhysical", bundle: ..., traitCollection: ...)`
    static func notPhysical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notPhysical, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "other_bg", bundle: ..., traitCollection: ...)`
    static func other_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.other_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pBottleneckArrow", bundle: ..., traitCollection: ...)`
    static func pBottleneckArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pBottleneckArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pChat", bundle: ..., traitCollection: ...)`
    static func pChat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pChat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pCheckNomal", bundle: ..., traitCollection: ...)`
    static func pCheckNomal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pCheckNomal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pCheckSelect", bundle: ..., traitCollection: ...)`
    static func pCheckSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pCheckSelect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_head_back", bundle: ..., traitCollection: ...)`
    static func p_head_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_head_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_m_s_amount", bundle: ..., traitCollection: ...)`
    static func p_m_s_amount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_m_s_amount, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_m_s_analyse_update_time", bundle: ..., traitCollection: ...)`
    static func p_m_s_analyse_update_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_m_s_analyse_update_time, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_m_s_create_time", bundle: ..., traitCollection: ...)`
    static func p_m_s_create_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_m_s_create_time, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_m_s_dealtime", bundle: ..., traitCollection: ...)`
    static func p_m_s_dealtime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_m_s_dealtime, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_m_s_dep", bundle: ..., traitCollection: ...)`
    static func p_m_s_dep(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_m_s_dep, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_m_s_edittime", bundle: ..., traitCollection: ...)`
    static func p_m_s_edittime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_m_s_edittime, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_m_s_name", bundle: ..., traitCollection: ...)`
    static func p_m_s_name(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_m_s_name, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_m_s_relation", bundle: ..., traitCollection: ...)`
    static func p_m_s_relation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_m_s_relation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_m_s_stage", bundle: ..., traitCollection: ...)`
    static func p_m_s_stage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_m_s_stage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_m_s_trade", bundle: ..., traitCollection: ...)`
    static func p_m_s_trade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_m_s_trade, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_m_s_trade_name", bundle: ..., traitCollection: ...)`
    static func p_m_s_trade_name(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_m_s_trade_name, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_m_s_user", bundle: ..., traitCollection: ...)`
    static func p_m_s_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_m_s_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_menu_bottom", bundle: ..., traitCollection: ...)`
    static func p_menu_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_menu_bottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_menu_button", bundle: ..., traitCollection: ...)`
    static func p_menu_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_menu_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_menu_center", bundle: ..., traitCollection: ...)`
    static func p_menu_center(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_menu_center, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_menu_down", bundle: ..., traitCollection: ...)`
    static func p_menu_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_menu_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_menu_hiden_img", bundle: ..., traitCollection: ...)`
    static func p_menu_hiden_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_menu_hiden_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_menu_show_img", bundle: ..., traitCollection: ...)`
    static func p_menu_show_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_menu_show_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_menu_sort_img", bundle: ..., traitCollection: ...)`
    static func p_menu_sort_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_menu_sort_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_menu_stage_img", bundle: ..., traitCollection: ...)`
    static func p_menu_stage_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_menu_stage_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_menu_top", bundle: ..., traitCollection: ...)`
    static func p_menu_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_menu_top, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_menu_up", bundle: ..., traitCollection: ...)`
    static func p_menu_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_menu_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_people1", bundle: ..., traitCollection: ...)`
    static func p_people1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_people1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_people2", bundle: ..., traitCollection: ...)`
    static func p_people2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_people2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_people3", bundle: ..., traitCollection: ...)`
    static func p_people3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_people3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_people_s1", bundle: ..., traitCollection: ...)`
    static func p_people_s1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_people_s1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_people_s2", bundle: ..., traitCollection: ...)`
    static func p_people_s2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_people_s2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_people_s3", bundle: ..., traitCollection: ...)`
    static func p_people_s3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_people_s3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_show0", bundle: ..., traitCollection: ...)`
    static func p_show0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_show0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_show1", bundle: ..., traitCollection: ...)`
    static func p_show1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_show1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_triangle1", bundle: ..., traitCollection: ...)`
    static func p_triangle1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_triangle1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_triangle2", bundle: ..., traitCollection: ...)`
    static func p_triangle2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_triangle2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_triangle3", bundle: ..., traitCollection: ...)`
    static func p_triangle3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_triangle3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_triangle4", bundle: ..., traitCollection: ...)`
    static func p_triangle4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_triangle4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_triangle5", bundle: ..., traitCollection: ...)`
    static func p_triangle5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_triangle5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "p_triangle6", bundle: ..., traitCollection: ...)`
    static func p_triangle6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.p_triangle6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pageNomal", bundle: ..., traitCollection: ...)`
    static func pageNomal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pageNomal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pageSelect", bundle: ..., traitCollection: ...)`
    static func pageSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pageSelect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pauseBlue", bundle: ..., traitCollection: ...)`
    static func pauseBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pauseBlue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pauseWhite", bundle: ..., traitCollection: ...)`
    static func pauseWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pauseWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pdf", bundle: ..., traitCollection: ...)`
    static func pdf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pdf, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "personalCheckNomal", bundle: ..., traitCollection: ...)`
    static func personalCheckNomal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personalCheckNomal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "personalCheckSelect", bundle: ..., traitCollection: ...)`
    static func personalCheckSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personalCheckSelect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "photo", bundle: ..., traitCollection: ...)`
    static func photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "playBlue", bundle: ..., traitCollection: ...)`
    static func playBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playBlue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "playIcon", bundle: ..., traitCollection: ...)`
    static func playIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "playWhite", bundle: ..., traitCollection: ...)`
    static func playWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "praise_green_ico", bundle: ..., traitCollection: ...)`
    static func praise_green_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.praise_green_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "praise_ico", bundle: ..., traitCollection: ...)`
    static func praise_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.praise_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "praiseicon", bundle: ..., traitCollection: ...)`
    static func praiseicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.praiseicon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "proFollowAdd", bundle: ..., traitCollection: ...)`
    static func proFollowAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.proFollowAdd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "proStart", bundle: ..., traitCollection: ...)`
    static func proStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.proStart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "proStop", bundle: ..., traitCollection: ...)`
    static func proStop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.proStop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectAddJian", bundle: ..., traitCollection: ...)`
    static func projectAddJian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectAddJian, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectNomal", bundle: ..., traitCollection: ...)`
    static func projectNomal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectNomal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectS-Nomal0", bundle: ..., traitCollection: ...)`
    static func projectSNomal0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectSNomal0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectS-Nomal1", bundle: ..., traitCollection: ...)`
    static func projectSNomal1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectSNomal1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectS-Nomal2", bundle: ..., traitCollection: ...)`
    static func projectSNomal2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectSNomal2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectS-Nomal3", bundle: ..., traitCollection: ...)`
    static func projectSNomal3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectSNomal3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectS-Nomal4", bundle: ..., traitCollection: ...)`
    static func projectSNomal4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectSNomal4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectS-Nomal5", bundle: ..., traitCollection: ...)`
    static func projectSNomal5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectSNomal5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectS-Select0", bundle: ..., traitCollection: ...)`
    static func projectSSelect0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectSSelect0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectS-Select1", bundle: ..., traitCollection: ...)`
    static func projectSSelect1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectSSelect1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectS-Select2", bundle: ..., traitCollection: ...)`
    static func projectSSelect2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectSSelect2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectS-Select3", bundle: ..., traitCollection: ...)`
    static func projectSSelect3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectSSelect3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectS-Select4", bundle: ..., traitCollection: ...)`
    static func projectSSelect4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectSSelect4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectS-Select5", bundle: ..., traitCollection: ...)`
    static func projectSSelect5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectSSelect5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectSelect", bundle: ..., traitCollection: ...)`
    static func projectSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectSelect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectSituationBack", bundle: ..., traitCollection: ...)`
    static func projectSituationBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectSituationBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectSituationCellTop", bundle: ..., traitCollection: ...)`
    static func projectSituationCellTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectSituationCellTop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectStar", bundle: ..., traitCollection: ...)`
    static func projectStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectStar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectUpDown", bundle: ..., traitCollection: ...)`
    static func projectUpDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectUpDown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "projectWenHao", bundle: ..., traitCollection: ...)`
    static func projectWenHao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectWenHao, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "project_calendar_bottom", bundle: ..., traitCollection: ...)`
    static func project_calendar_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.project_calendar_bottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "project_calendar_top", bundle: ..., traitCollection: ...)`
    static func project_calendar_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.project_calendar_top, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "project_chanping", bundle: ..., traitCollection: ...)`
    static func project_chanping(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.project_chanping, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "project_chooses", bundle: ..., traitCollection: ...)`
    static func project_chooses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.project_chooses, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "project_diaoyan", bundle: ..., traitCollection: ...)`
    static func project_diaoyan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.project_diaoyan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "project_fangan", bundle: ..., traitCollection: ...)`
    static func project_fangan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.project_fangan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "project_huodong", bundle: ..., traitCollection: ...)`
    static func project_huodong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.project_huodong, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "project_jishujiaoliu", bundle: ..., traitCollection: ...)`
    static func project_jishujiaoliu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.project_jishujiaoliu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "project_message", bundle: ..., traitCollection: ...)`
    static func project_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.project_message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "project_plan_down", bundle: ..., traitCollection: ...)`
    static func project_plan_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.project_plan_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "project_plan_up", bundle: ..., traitCollection: ...)`
    static func project_plan_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.project_plan_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "project_rili", bundle: ..., traitCollection: ...)`
    static func project_rili(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.project_rili, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "project_search", bundle: ..., traitCollection: ...)`
    static func project_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.project_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "project_search_down", bundle: ..., traitCollection: ...)`
    static func project_search_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.project_search_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "project_search_up", bundle: ..., traitCollection: ...)`
    static func project_search_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.project_search_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "project_yangban", bundle: ..., traitCollection: ...)`
    static func project_yangban(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.project_yangban, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "promore", bundle: ..., traitCollection: ...)`
    static func promore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promore, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pst0", bundle: ..., traitCollection: ...)`
    static func pst0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pst0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pst1", bundle: ..., traitCollection: ...)`
    static func pst1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pst1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pst2", bundle: ..., traitCollection: ...)`
    static func pst2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pst2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pst3", bundle: ..., traitCollection: ...)`
    static func pst3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pst3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pst4", bundle: ..., traitCollection: ...)`
    static func pst4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pst4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pst5", bundle: ..., traitCollection: ...)`
    static func pst5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pst5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pst6", bundle: ..., traitCollection: ...)`
    static func pst6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pst6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pst7", bundle: ..., traitCollection: ...)`
    static func pst7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pst7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pstArrow", bundle: ..., traitCollection: ...)`
    static func pstArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pstArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pstArrowGreen", bundle: ..., traitCollection: ...)`
    static func pstArrowGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pstArrowGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pstArrowGreenUp", bundle: ..., traitCollection: ...)`
    static func pstArrowGreenUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pstArrowGreenUp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pstDown", bundle: ..., traitCollection: ...)`
    static func pstDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pstDown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pstMore", bundle: ..., traitCollection: ...)`
    static func pstMore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pstMore, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pstPhone", bundle: ..., traitCollection: ...)`
    static func pstPhone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pstPhone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pstUp", bundle: ..., traitCollection: ...)`
    static func pstUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pstUp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pstY", bundle: ..., traitCollection: ...)`
    static func pstY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pstY, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "publish-audio", bundle: ..., traitCollection: ...)`
    static func publishAudio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.publishAudio, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qfMemberAdd", bundle: ..., traitCollection: ...)`
    static func qfMemberAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qfMemberAdd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qfMemberMins", bundle: ..., traitCollection: ...)`
    static func qfMemberMins(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qfMemberMins, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_activity_img", bundle: ..., traitCollection: ...)`
    static func qf_activity_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_activity_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_address_list_img", bundle: ..., traitCollection: ...)`
    static func qf_address_list_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_address_list_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_alertBackImage", bundle: ..., traitCollection: ...)`
    static func qf_alertBackImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_alertBackImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_alert_line", bundle: ..., traitCollection: ...)`
    static func qf_alert_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_alert_line, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_alert_xx", bundle: ..., traitCollection: ...)`
    static func qf_alert_xx(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_alert_xx, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_analysis_duibi", bundle: ..., traitCollection: ...)`
    static func qf_analysis_duibi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_analysis_duibi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_analysis_qushi", bundle: ..., traitCollection: ...)`
    static func qf_analysis_qushi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_analysis_qushi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_baifangtognji", bundle: ..., traitCollection: ...)`
    static func qf_baifangtognji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_baifangtognji, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_biaoqianimage", bundle: ..., traitCollection: ...)`
    static func qf_biaoqianimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_biaoqianimage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_carry_down_img", bundle: ..., traitCollection: ...)`
    static func qf_carry_down_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_carry_down_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_celvefenxi", bundle: ..., traitCollection: ...)`
    static func qf_celvefenxi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_celvefenxi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_cl_img", bundle: ..., traitCollection: ...)`
    static func qf_cl_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_cl_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_client_img", bundle: ..., traitCollection: ...)`
    static func qf_client_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_client_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_client_pool_img", bundle: ..., traitCollection: ...)`
    static func qf_client_pool_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_client_pool_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_close", bundle: ..., traitCollection: ...)`
    static func qf_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_closeVC", bundle: ..., traitCollection: ...)`
    static func qf_closeVC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_closeVC, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_clue_img", bundle: ..., traitCollection: ...)`
    static func qf_clue_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_clue_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_clues_circle_img", bundle: ..., traitCollection: ...)`
    static func qf_clues_circle_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_clues_circle_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_compact_img", bundle: ..., traitCollection: ...)`
    static func qf_compact_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_compact_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_consult_img", bundle: ..., traitCollection: ...)`
    static func qf_consult_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_consult_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_contactImage", bundle: ..., traitCollection: ...)`
    static func qf_contactImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_contactImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_contact_img", bundle: ..., traitCollection: ...)`
    static func qf_contact_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_contact_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_depImage", bundle: ..., traitCollection: ...)`
    static func qf_depImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_depImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_down_arrowWhite", bundle: ..., traitCollection: ...)`
    static func qf_down_arrowWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_down_arrowWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_fengxianfenxi", bundle: ..., traitCollection: ...)`
    static func qf_fengxianfenxi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_fengxianfenxi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_file_img", bundle: ..., traitCollection: ...)`
    static func qf_file_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_file_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_gerenjianjieImage", bundle: ..., traitCollection: ...)`
    static func qf_gerenjianjieImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_gerenjianjieImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_gongzuojingliImage", bundle: ..., traitCollection: ...)`
    static func qf_gongzuojingliImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_gongzuojingliImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_green_right", bundle: ..., traitCollection: ...)`
    static func qf_green_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_green_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_invoice_img", bundle: ..., traitCollection: ...)`
    static func qf_invoice_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_invoice_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_jiaoyujingliImage", bundle: ..., traitCollection: ...)`
    static func qf_jiaoyujingliImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_jiaoyujingliImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_knowledge_base_img", bundle: ..., traitCollection: ...)`
    static func qf_knowledge_base_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_knowledge_base_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_line_green", bundle: ..., traitCollection: ...)`
    static func qf_line_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_line_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_luopanfenxi", bundle: ..., traitCollection: ...)`
    static func qf_luopanfenxi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_luopanfenxi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_nextArrow", bundle: ..., traitCollection: ...)`
    static func qf_nextArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_nextArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_nodataImage", bundle: ..., traitCollection: ...)`
    static func qf_nodataImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_nodataImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_phoneC", bundle: ..., traitCollection: ...)`
    static func qf_phoneC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_phoneC, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_pingjingfenxi", bundle: ..., traitCollection: ...)`
    static func qf_pingjingfenxi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_pingjingfenxi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_product_library_img", bundle: ..., traitCollection: ...)`
    static func qf_product_library_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_product_library_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_project0", bundle: ..., traitCollection: ...)`
    static func qf_project0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_project0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_project1", bundle: ..., traitCollection: ...)`
    static func qf_project1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_project1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_project2", bundle: ..., traitCollection: ...)`
    static func qf_project2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_project2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_project3", bundle: ..., traitCollection: ...)`
    static func qf_project3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_project3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_project4", bundle: ..., traitCollection: ...)`
    static func qf_project4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_project4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_project5", bundle: ..., traitCollection: ...)`
    static func qf_project5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_project5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_project6", bundle: ..., traitCollection: ...)`
    static func qf_project6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_project6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_project_fengxianxiang", bundle: ..., traitCollection: ...)`
    static func qf_project_fengxianxiang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_project_fengxianxiang, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_project_img", bundle: ..., traitCollection: ...)`
    static func qf_project_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_project_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_project_nextArrow", bundle: ..., traitCollection: ...)`
    static func qf_project_nextArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_project_nextArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_project_textBack", bundle: ..., traitCollection: ...)`
    static func qf_project_textBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_project_textBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_project_waring", bundle: ..., traitCollection: ...)`
    static func qf_project_waring(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_project_waring, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_project_xiangmudefen", bundle: ..., traitCollection: ...)`
    static func qf_project_xiangmudefen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_project_xiangmudefen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_project_yingdanzhishu", bundle: ..., traitCollection: ...)`
    static func qf_project_yingdanzhishu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_project_yingdanzhishu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_record_img", bundle: ..., traitCollection: ...)`
    static func qf_record_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_record_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_schedule_img", bundle: ..., traitCollection: ...)`
    static func qf_schedule_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_schedule_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_select_statusalready", bundle: ..., traitCollection: ...)`
    static func qf_select_statusalready(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_select_statusalready, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_select_statuschoose", bundle: ..., traitCollection: ...)`
    static func qf_select_statuschoose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_select_statuschoose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_select_statusdefault", bundle: ..., traitCollection: ...)`
    static func qf_select_statusdefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_select_statusdefault, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_shangjitongji", bundle: ..., traitCollection: ...)`
    static func qf_shangjitongji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_shangjitongji, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_small_class_img", bundle: ..., traitCollection: ...)`
    static func qf_small_class_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_small_class_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_statistics_analyze_img", bundle: ..., traitCollection: ...)`
    static func qf_statistics_analyze_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_statistics_analyze_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_sweep_card_img", bundle: ..., traitCollection: ...)`
    static func qf_sweep_card_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_sweep_card_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_triangle_image", bundle: ..., traitCollection: ...)`
    static func qf_triangle_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_triangle_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_web_back", bundle: ..., traitCollection: ...)`
    static func qf_web_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_web_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_web_next", bundle: ..., traitCollection: ...)`
    static func qf_web_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_web_next, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_web_refresh", bundle: ..., traitCollection: ...)`
    static func qf_web_refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_web_refresh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_xiaoshouloudou", bundle: ..., traitCollection: ...)`
    static func qf_xiaoshouloudou(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_xiaoshouloudou, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_yejipaihang", bundle: ..., traitCollection: ...)`
    static func qf_yejipaihang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_yejipaihang, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_yellow_right", bundle: ..., traitCollection: ...)`
    static func qf_yellow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_yellow_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qf_zhuzuoImage", bundle: ..., traitCollection: ...)`
    static func qf_zhuzuoImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qf_zhuzuoImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qfphoneadd", bundle: ..., traitCollection: ...)`
    static func qfphoneadd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qfphoneadd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qfphonedel", bundle: ..., traitCollection: ...)`
    static func qfphonedel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qfphonedel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qichacha", bundle: ..., traitCollection: ...)`
    static func qichacha(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qichacha, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rEnd", bundle: ..., traitCollection: ...)`
    static func rEnd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rEnd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rPlay", bundle: ..., traitCollection: ...)`
    static func rPlay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rPlay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rStop", bundle: ..., traitCollection: ...)`
    static func rStop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rStop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rankingImage1", bundle: ..., traitCollection: ...)`
    static func rankingImage1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rankingImage1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rankingImage2", bundle: ..., traitCollection: ...)`
    static func rankingImage2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rankingImage2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rankingImage3", bundle: ..., traitCollection: ...)`
    static func rankingImage3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rankingImage3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rankingImage4", bundle: ..., traitCollection: ...)`
    static func rankingImage4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rankingImage4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "reSend", bundle: ..., traitCollection: ...)`
    static func reSend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reSend, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "right", bundle: ..., traitCollection: ...)`
    static func right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rightArrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rightArrow24", bundle: ..., traitCollection: ...)`
    static func rightArrow24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow24, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rightArrows", bundle: ..., traitCollection: ...)`
    static func rightArrows(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrows, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scheduleAdd", bundle: ..., traitCollection: ...)`
    static func scheduleAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scheduleAdd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sdRefeshView_arrow", bundle: ..., traitCollection: ...)`
    static func sdRefeshView_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdRefeshView_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "searchBtn", bundle: ..., traitCollection: ...)`
    static func searchBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchBtn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search_gray", bundle: ..., traitCollection: ...)`
    static func search_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search_white", bundle: ..., traitCollection: ...)`
    static func search_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "select_photo", bundle: ..., traitCollection: ...)`
    static func select_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.select_photo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shareBottomBackground", bundle: ..., traitCollection: ...)`
    static func shareBottomBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shareBottomBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shareIcon", bundle: ..., traitCollection: ...)`
    static func shareIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shareIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_mail", bundle: ..., traitCollection: ...)`
    static func share_mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_mail, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_msg", bundle: ..., traitCollection: ...)`
    static func share_msg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_msg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_qq", bundle: ..., traitCollection: ...)`
    static func share_qq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_qq, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_wechat", bundle: ..., traitCollection: ...)`
    static func share_wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_wechat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shutterstock", bundle: ..., traitCollection: ...)`
    static func shutterstock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shutterstock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "situationCellmarkNomal", bundle: ..., traitCollection: ...)`
    static func situationCellmarkNomal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.situationCellmarkNomal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "situationCellmarkSelect", bundle: ..., traitCollection: ...)`
    static func situationCellmarkSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.situationCellmarkSelect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sl_cloud", bundle: ..., traitCollection: ...)`
    static func sl_cloud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sl_cloud, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "slider", bundle: ..., traitCollection: ...)`
    static func slider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slider, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sliderWhite", bundle: ..., traitCollection: ...)`
    static func sliderWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sliderWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "smallHead", bundle: ..., traitCollection: ...)`
    static func smallHead(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smallHead, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "smallHeadG", bundle: ..., traitCollection: ...)`
    static func smallHeadG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smallHeadG, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star_normal", bundle: ..., traitCollection: ...)`
    static func star_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star_normal_left", bundle: ..., traitCollection: ...)`
    static func star_normal_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_normal_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star_normal_right", bundle: ..., traitCollection: ...)`
    static func star_normal_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_normal_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star_select", bundle: ..., traitCollection: ...)`
    static func star_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star_select_left", bundle: ..., traitCollection: ...)`
    static func star_select_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_select_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star_select_right", bundle: ..., traitCollection: ...)`
    static func star_select_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_select_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "subtractMember_highlighted", bundle: ..., traitCollection: ...)`
    static func subtractMember_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subtractMember_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "subtractMember_normal", bundle: ..., traitCollection: ...)`
    static func subtractMember_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subtractMember_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "switch_normal", bundle: ..., traitCollection: ...)`
    static func switch_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switch_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "switch_select", bundle: ..., traitCollection: ...)`
    static func switch_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switch_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_main_normal", bundle: ..., traitCollection: ...)`
    static func tab_main_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_main_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_main_selected", bundle: ..., traitCollection: ...)`
    static func tab_main_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_main_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_mine_normal", bundle: ..., traitCollection: ...)`
    static func tab_mine_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_mine_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_mine_selected", bundle: ..., traitCollection: ...)`
    static func tab_mine_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_mine_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tableSearch", bundle: ..., traitCollection: ...)`
    static func tableSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tableSearch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "talkFenxiBaoGao", bundle: ..., traitCollection: ...)`
    static func talkFenxiBaoGao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.talkFenxiBaoGao, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "talkYuYinBeiwang", bundle: ..., traitCollection: ...)`
    static func talkYuYinBeiwang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.talkYuYinBeiwang, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "theme", bundle: ..., traitCollection: ...)`
    static func theme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theme, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "theme_delete", bundle: ..., traitCollection: ...)`
    static func theme_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theme_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "theme_delete_highlighted", bundle: ..., traitCollection: ...)`
    static func theme_delete_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theme_delete_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "theme_dismiss", bundle: ..., traitCollection: ...)`
    static func theme_dismiss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theme_dismiss, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "theme_edit", bundle: ..., traitCollection: ...)`
    static func theme_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theme_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "theme_quit", bundle: ..., traitCollection: ...)`
    static func theme_quit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theme_quit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "theme_rightArrow", bundle: ..., traitCollection: ...)`
    static func theme_rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theme_rightArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "theme_setTop", bundle: ..., traitCollection: ...)`
    static func theme_setTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theme_setTop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "theme_transmit", bundle: ..., traitCollection: ...)`
    static func theme_transmit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theme_transmit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "theme_transmit_big", bundle: ..., traitCollection: ...)`
    static func theme_transmit_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theme_transmit_big, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "time", bundle: ..., traitCollection: ...)`
    static func time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.time, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tome", bundle: ..., traitCollection: ...)`
    static func tome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tome, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unBing0", bundle: ..., traitCollection: ...)`
    static func unBing0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unBing0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unBing1", bundle: ..., traitCollection: ...)`
    static func unBing1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unBing1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unBing2", bundle: ..., traitCollection: ...)`
    static func unBing2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unBing2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "up", bundle: ..., traitCollection: ...)`
    static func up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "upArrow", bundle: ..., traitCollection: ...)`
    static func upArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visit_evaluate_top_back", bundle: ..., traitCollection: ...)`
    static func visit_evaluate_top_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visit_evaluate_top_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voice", bundle: ..., traitCollection: ...)`
    static func voice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voiceL1", bundle: ..., traitCollection: ...)`
    static func voiceL1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voiceL1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voiceL2", bundle: ..., traitCollection: ...)`
    static func voiceL2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voiceL2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voiceL3", bundle: ..., traitCollection: ...)`
    static func voiceL3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voiceL3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voiceR1", bundle: ..., traitCollection: ...)`
    static func voiceR1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voiceR1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voiceR2", bundle: ..., traitCollection: ...)`
    static func voiceR2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voiceR2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voiceR3", bundle: ..., traitCollection: ...)`
    static func voiceR3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voiceR3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "workbenchNomal", bundle: ..., traitCollection: ...)`
    static func workbenchNomal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workbenchNomal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "workbenchSelect", bundle: ..., traitCollection: ...)`
    static func workbenchSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workbenchSelect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "x", bundle: ..., traitCollection: ...)`
    static func x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.x, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xljm14", bundle: ..., traitCollection: ...)`
    static func xljm14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xljm14, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xljm5", bundle: ..., traitCollection: ...)`
    static func xljm5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xljm5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xljm5_Nomal", bundle: ..., traitCollection: ...)`
    static func xljm5_Nomal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xljm5_Nomal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xljm5_Select", bundle: ..., traitCollection: ...)`
    static func xljm5_Select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xljm5_Select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xljm6_Nomal", bundle: ..., traitCollection: ...)`
    static func xljm6_Nomal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xljm6_Nomal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xljm6_Select", bundle: ..., traitCollection: ...)`
    static func xljm6_Select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xljm6_Select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "yuyin", bundle: ..., traitCollection: ...)`
    static func yuyin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yuyin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zhangkaifenzu", bundle: ..., traitCollection: ...)`
    static func zhangkaifenzu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zhangkaifenzu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "二维码", bundle: ..., traitCollection: ...)`
    static func 二维码(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.二维码, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "小花_normal", bundle: ..., traitCollection: ...)`
    static func 小花_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.小花_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "小花_select", bundle: ..., traitCollection: ...)`
    static func 小花_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.小花_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "表情_normal", bundle: ..., traitCollection: ...)`
    static func 表情_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.表情_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "表情_select", bundle: ..., traitCollection: ...)`
    static func 表情_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.表情_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "铃铛_normal", bundle: ..., traitCollection: ...)`
    static func 铃铛_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.铃铛_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "铃铛_select", bundle: ..., traitCollection: ...)`
    static func 铃铛_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.铃铛_select, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 65 nibs.
  struct nib {
    /// Nib `AddProductVC`.
    static let addProductVC = _R.nib._AddProductVC()
    /// Nib `AddcontactView`.
    static let addcontactView = _R.nib._AddcontactView()
    /// Nib `AgencyAdressCell`.
    static let agencyAdressCell = _R.nib._AgencyAdressCell()
    /// Nib `AgencyInfoCell`.
    static let agencyInfoCell = _R.nib._AgencyInfoCell()
    /// Nib `AgencyTradeCell`.
    static let agencyTradeCell = _R.nib._AgencyTradeCell()
    /// Nib `BaseSearchView`.
    static let baseSearchView = _R.nib._BaseSearchView()
    /// Nib `BaseTableCell`.
    static let baseTableCell = _R.nib._BaseTableCell()
    /// Nib `CLDatePicker`.
    static let clDatePicker = _R.nib._CLDatePicker()
    /// Nib `CanBackWebVC`.
    static let canBackWebVC = _R.nib._CanBackWebVC()
    /// Nib `ChatContentCell`.
    static let chatContentCell = _R.nib._ChatContentCell()
    /// Nib `CustomPool`.
    static let customPool = _R.nib._CustomPool()
    /// Nib `DatePicker`.
    static let datePicker = _R.nib._DatePicker()
    /// Nib `DepartmentCell`.
    static let departmentCell = _R.nib._DepartmentCell()
    /// Nib `EffectSummaryCell`.
    static let effectSummaryCell = _R.nib._EffectSummaryCell()
    /// Nib `EnterpriseManagementVC`.
    static let enterpriseManagementVC = _R.nib._EnterpriseManagementVC()
    /// Nib `FitlerRightCell`.
    static let fitlerRightCell = _R.nib._FitlerRightCell()
    /// Nib `GroupIsOpenVC`.
    static let groupIsOpenVC = _R.nib._GroupIsOpenVC()
    /// Nib `HYAddContactVC`.
    static let hyAddContactVC = _R.nib._HYAddContactVC()
    /// Nib `HYAddTagVC`.
    static let hyAddTagVC = _R.nib._HYAddTagVC()
    /// Nib `HYBoltingDepMemberCell`.
    static let hyBoltingDepMemberCell = _R.nib._HYBoltingDepMemberCell()
    /// Nib `HYCarryDownCell`.
    static let hyCarryDownCell = _R.nib._HYCarryDownCell()
    /// Nib `HYCarryDownHeadView`.
    static let hyCarryDownHeadView = _R.nib._HYCarryDownHeadView()
    /// Nib `HYClientPoolCell`.
    static let hyClientPoolCell = _R.nib._HYClientPoolCell()
    /// Nib `HYContactEditNewCell`.
    static let hyContactEditNewCell = _R.nib._HYContactEditNewCell()
    /// Nib `HYContactNewCell`.
    static let hyContactNewCell = _R.nib._HYContactNewCell()
    /// Nib `HYCustomerDetailCell`.
    static let hyCustomerDetailCell = _R.nib._HYCustomerDetailCell()
    /// Nib `HYFenXiHeaderV`.
    static let hyFenXiHeaderV = _R.nib._HYFenXiHeaderV()
    /// Nib `HYNewClientVC`.
    static let hyNewClientVC = _R.nib._HYNewClientVC()
    /// Nib `HYNewProjectTopView`.
    static let hyNewProjectTopView = _R.nib._HYNewProjectTopView()
    /// Nib `HYProjectAnalysisCell`.
    static let hyProjectAnalysisCell = _R.nib._HYProjectAnalysisCell()
    /// Nib `HYProjectCell`.
    static let hyProjectCell = _R.nib._HYProjectCell()
    /// Nib `HYScheduleDayListCell`.
    static let hyScheduleDayListCell = _R.nib._HYScheduleDayListCell()
    /// Nib `HYScheduleListCell`.
    static let hyScheduleListCell = _R.nib._HYScheduleListCell()
    /// Nib `HYSearchClientCell`.
    static let hySearchClientCell = _R.nib._HYSearchClientCell()
    /// Nib `HYSearchProjectCell`.
    static let hySearchProjectCell = _R.nib._HYSearchProjectCell()
    /// Nib `HYSechduleSearchCell`.
    static let hySechduleSearchCell = _R.nib._HYSechduleSearchCell()
    /// Nib `HYVisitAnalysisCell`.
    static let hyVisitAnalysisCell = _R.nib._HYVisitAnalysisCell()
    /// Nib `LeftCell`.
    static let leftCell = _R.nib._LeftCell()
    /// Nib `MailConfigVC`.
    static let mailConfigVC = _R.nib._MailConfigVC()
    /// Nib `MineReviseVC`.
    static let mineReviseVC = _R.nib._MineReviseVC()
    /// Nib `ObjCClassTreeNodeView`.
    static let objCClassTreeNodeView = _R.nib._ObjCClassTreeNodeView()
    /// Nib `OrderEmailVC`.
    static let orderEmailVC = _R.nib._OrderEmailVC()
    /// Nib `PasteView`.
    static let pasteView = _R.nib._PasteView()
    /// Nib `PraiseCell`.
    static let praiseCell = _R.nib._PraiseCell()
    /// Nib `ProPlanDetailDefaultCell`.
    static let proPlanDetailDefaultCell = _R.nib._ProPlanDetailDefaultCell()
    /// Nib `ProPlanDetailDesCell`.
    static let proPlanDetailDesCell = _R.nib._ProPlanDetailDesCell()
    /// Nib `ProduceCell`.
    static let produceCell = _R.nib._ProduceCell()
    /// Nib `ProjectDetailCell`.
    static let projectDetailCell = _R.nib._ProjectDetailCell()
    /// Nib `ProjectDetailVC`.
    static let projectDetailVC = _R.nib._ProjectDetailVC()
    /// Nib `QFAddDepVC`.
    static let qfAddDepVC = _R.nib._QFAddDepVC()
    /// Nib `QFAnalysisHistoryCell`.
    static let qfAnalysisHistoryCell = _R.nib._QFAnalysisHistoryCell()
    /// Nib `QFChooseDepCell`.
    static let qfChooseDepCell = _R.nib._QFChooseDepCell()
    /// Nib `QFDepCell`.
    static let qfDepCell = _R.nib._QFDepCell()
    /// Nib `QFFollowUpProjectCell`.
    static let qfFollowUpProjectCell = _R.nib._QFFollowUpProjectCell()
    /// Nib `QFMaskSortCell`.
    static let qfMaskSortCell = _R.nib._QFMaskSortCell()
    /// Nib `QFPersonnelVC`.
    static let qfPersonnelVC = _R.nib._QFPersonnelVC()
    /// Nib `QFProductRightCell`.
    static let qfProductRightCell = _R.nib._QFProductRightCell()
    /// Nib `QFVcardVC`.
    static let qfVcardVC = _R.nib._QFVcardVC()
    /// Nib `RankingListCell`.
    static let rankingListCell = _R.nib._RankingListCell()
    /// Nib `RightCell`.
    static let rightCell = _R.nib._RightCell()
    /// Nib `SortAddressVC`.
    static let sortAddressVC = _R.nib._SortAddressVC()
    /// Nib `ThemeListCell`.
    static let themeListCell = _R.nib._ThemeListCell()
    /// Nib `ToSetPermanceCell`.
    static let toSetPermanceCell = _R.nib._ToSetPermanceCell()
    /// Nib `ToViewOtherPerformanceVC`.
    static let toViewOtherPerformanceVC = _R.nib._ToViewOtherPerformanceVC()
    /// Nib `VisitReportCellBottomView`.
    static let visitReportCellBottomView = _R.nib._VisitReportCellBottomView()
    
    /// `UINib(name: "AddProductVC", in: bundle)`
    static func addProductVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addProductVC)
    }
    
    /// `UINib(name: "AddcontactView", in: bundle)`
    static func addcontactView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addcontactView)
    }
    
    /// `UINib(name: "AgencyAdressCell", in: bundle)`
    static func agencyAdressCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.agencyAdressCell)
    }
    
    /// `UINib(name: "AgencyInfoCell", in: bundle)`
    static func agencyInfoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.agencyInfoCell)
    }
    
    /// `UINib(name: "AgencyTradeCell", in: bundle)`
    static func agencyTradeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.agencyTradeCell)
    }
    
    /// `UINib(name: "BaseSearchView", in: bundle)`
    static func baseSearchView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.baseSearchView)
    }
    
    /// `UINib(name: "BaseTableCell", in: bundle)`
    static func baseTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.baseTableCell)
    }
    
    /// `UINib(name: "CLDatePicker", in: bundle)`
    static func clDatePicker(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.clDatePicker)
    }
    
    /// `UINib(name: "CanBackWebVC", in: bundle)`
    static func canBackWebVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.canBackWebVC)
    }
    
    /// `UINib(name: "ChatContentCell", in: bundle)`
    static func chatContentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatContentCell)
    }
    
    /// `UINib(name: "CustomPool", in: bundle)`
    static func customPool(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customPool)
    }
    
    /// `UINib(name: "DatePicker", in: bundle)`
    static func datePicker(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.datePicker)
    }
    
    /// `UINib(name: "DepartmentCell", in: bundle)`
    static func departmentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.departmentCell)
    }
    
    /// `UINib(name: "EffectSummaryCell", in: bundle)`
    static func effectSummaryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.effectSummaryCell)
    }
    
    /// `UINib(name: "EnterpriseManagementVC", in: bundle)`
    static func enterpriseManagementVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.enterpriseManagementVC)
    }
    
    /// `UINib(name: "FitlerRightCell", in: bundle)`
    static func fitlerRightCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fitlerRightCell)
    }
    
    /// `UINib(name: "GroupIsOpenVC", in: bundle)`
    static func groupIsOpenVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.groupIsOpenVC)
    }
    
    /// `UINib(name: "HYAddContactVC", in: bundle)`
    static func hyAddContactVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyAddContactVC)
    }
    
    /// `UINib(name: "HYAddTagVC", in: bundle)`
    static func hyAddTagVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyAddTagVC)
    }
    
    /// `UINib(name: "HYBoltingDepMemberCell", in: bundle)`
    static func hyBoltingDepMemberCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyBoltingDepMemberCell)
    }
    
    /// `UINib(name: "HYCarryDownCell", in: bundle)`
    static func hyCarryDownCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyCarryDownCell)
    }
    
    /// `UINib(name: "HYCarryDownHeadView", in: bundle)`
    static func hyCarryDownHeadView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyCarryDownHeadView)
    }
    
    /// `UINib(name: "HYClientPoolCell", in: bundle)`
    static func hyClientPoolCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyClientPoolCell)
    }
    
    /// `UINib(name: "HYContactEditNewCell", in: bundle)`
    static func hyContactEditNewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyContactEditNewCell)
    }
    
    /// `UINib(name: "HYContactNewCell", in: bundle)`
    static func hyContactNewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyContactNewCell)
    }
    
    /// `UINib(name: "HYCustomerDetailCell", in: bundle)`
    static func hyCustomerDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyCustomerDetailCell)
    }
    
    /// `UINib(name: "HYFenXiHeaderV", in: bundle)`
    static func hyFenXiHeaderV(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyFenXiHeaderV)
    }
    
    /// `UINib(name: "HYNewClientVC", in: bundle)`
    static func hyNewClientVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyNewClientVC)
    }
    
    /// `UINib(name: "HYNewProjectTopView", in: bundle)`
    static func hyNewProjectTopView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyNewProjectTopView)
    }
    
    /// `UINib(name: "HYProjectAnalysisCell", in: bundle)`
    static func hyProjectAnalysisCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyProjectAnalysisCell)
    }
    
    /// `UINib(name: "HYProjectCell", in: bundle)`
    static func hyProjectCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyProjectCell)
    }
    
    /// `UINib(name: "HYScheduleDayListCell", in: bundle)`
    static func hyScheduleDayListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyScheduleDayListCell)
    }
    
    /// `UINib(name: "HYScheduleListCell", in: bundle)`
    static func hyScheduleListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyScheduleListCell)
    }
    
    /// `UINib(name: "HYSearchClientCell", in: bundle)`
    static func hySearchClientCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hySearchClientCell)
    }
    
    /// `UINib(name: "HYSearchProjectCell", in: bundle)`
    static func hySearchProjectCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hySearchProjectCell)
    }
    
    /// `UINib(name: "HYSechduleSearchCell", in: bundle)`
    static func hySechduleSearchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hySechduleSearchCell)
    }
    
    /// `UINib(name: "HYVisitAnalysisCell", in: bundle)`
    static func hyVisitAnalysisCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hyVisitAnalysisCell)
    }
    
    /// `UINib(name: "LeftCell", in: bundle)`
    static func leftCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.leftCell)
    }
    
    /// `UINib(name: "MailConfigVC", in: bundle)`
    static func mailConfigVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mailConfigVC)
    }
    
    /// `UINib(name: "MineReviseVC", in: bundle)`
    static func mineReviseVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mineReviseVC)
    }
    
    /// `UINib(name: "ObjCClassTreeNodeView", in: bundle)`
    static func objCClassTreeNodeView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.objCClassTreeNodeView)
    }
    
    /// `UINib(name: "OrderEmailVC", in: bundle)`
    static func orderEmailVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderEmailVC)
    }
    
    /// `UINib(name: "PasteView", in: bundle)`
    static func pasteView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pasteView)
    }
    
    /// `UINib(name: "PraiseCell", in: bundle)`
    static func praiseCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.praiseCell)
    }
    
    /// `UINib(name: "ProPlanDetailDefaultCell", in: bundle)`
    static func proPlanDetailDefaultCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.proPlanDetailDefaultCell)
    }
    
    /// `UINib(name: "ProPlanDetailDesCell", in: bundle)`
    static func proPlanDetailDesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.proPlanDetailDesCell)
    }
    
    /// `UINib(name: "ProduceCell", in: bundle)`
    static func produceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.produceCell)
    }
    
    /// `UINib(name: "ProjectDetailCell", in: bundle)`
    static func projectDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.projectDetailCell)
    }
    
    /// `UINib(name: "ProjectDetailVC", in: bundle)`
    static func projectDetailVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.projectDetailVC)
    }
    
    /// `UINib(name: "QFAddDepVC", in: bundle)`
    static func qfAddDepVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.qfAddDepVC)
    }
    
    /// `UINib(name: "QFAnalysisHistoryCell", in: bundle)`
    static func qfAnalysisHistoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.qfAnalysisHistoryCell)
    }
    
    /// `UINib(name: "QFChooseDepCell", in: bundle)`
    static func qfChooseDepCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.qfChooseDepCell)
    }
    
    /// `UINib(name: "QFDepCell", in: bundle)`
    static func qfDepCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.qfDepCell)
    }
    
    /// `UINib(name: "QFFollowUpProjectCell", in: bundle)`
    static func qfFollowUpProjectCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.qfFollowUpProjectCell)
    }
    
    /// `UINib(name: "QFMaskSortCell", in: bundle)`
    static func qfMaskSortCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.qfMaskSortCell)
    }
    
    /// `UINib(name: "QFPersonnelVC", in: bundle)`
    static func qfPersonnelVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.qfPersonnelVC)
    }
    
    /// `UINib(name: "QFProductRightCell", in: bundle)`
    static func qfProductRightCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.qfProductRightCell)
    }
    
    /// `UINib(name: "QFVcardVC", in: bundle)`
    static func qfVcardVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.qfVcardVC)
    }
    
    /// `UINib(name: "RankingListCell", in: bundle)`
    static func rankingListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rankingListCell)
    }
    
    /// `UINib(name: "RightCell", in: bundle)`
    static func rightCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rightCell)
    }
    
    /// `UINib(name: "SortAddressVC", in: bundle)`
    static func sortAddressVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sortAddressVC)
    }
    
    /// `UINib(name: "ThemeListCell", in: bundle)`
    static func themeListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.themeListCell)
    }
    
    /// `UINib(name: "ToSetPermanceCell", in: bundle)`
    static func toSetPermanceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.toSetPermanceCell)
    }
    
    /// `UINib(name: "ToViewOtherPerformanceVC", in: bundle)`
    static func toViewOtherPerformanceVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.toViewOtherPerformanceVC)
    }
    
    /// `UINib(name: "VisitReportCellBottomView", in: bundle)`
    static func visitReportCellBottomView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.visitReportCellBottomView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 17 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CustomDetailContactsCell`.
    static let customDetailContactsCell: Rswift.ReuseIdentifier<CustomDetailContactsCell> = Rswift.ReuseIdentifier(identifier: "CustomDetailContactsCell")
    /// Reuse identifier `CustomDetailParticipantsCell`.
    static let customDetailParticipantsCell: Rswift.ReuseIdentifier<CustomDetailParticipantsCell> = Rswift.ReuseIdentifier(identifier: "CustomDetailParticipantsCell")
    /// Reuse identifier `CustomPoolCell`.
    static let customPoolCell: Rswift.ReuseIdentifier<CustomPoolCell> = Rswift.ReuseIdentifier(identifier: "CustomPoolCell")
    /// Reuse identifier `HYClientPoolCell`.
    static let hyClientPoolCell: Rswift.ReuseIdentifier<HYClientPoolCell> = Rswift.ReuseIdentifier(identifier: "HYClientPoolCell")
    /// Reuse identifier `HYCustomerDetailCell`.
    static let hyCustomerDetailCell: Rswift.ReuseIdentifier<HYCustomerDetailCell> = Rswift.ReuseIdentifier(identifier: "HYCustomerDetailCell")
    /// Reuse identifier `HYProjectAnalysisCell`.
    static let hyProjectAnalysisCell: Rswift.ReuseIdentifier<HYProjectAnalysisCell> = Rswift.ReuseIdentifier(identifier: "HYProjectAnalysisCell")
    /// Reuse identifier `HYProjectCell`.
    static let hyProjectCell: Rswift.ReuseIdentifier<HYProjectCell> = Rswift.ReuseIdentifier(identifier: "HYProjectCell")
    /// Reuse identifier `HYSearchClientCell`.
    static let hySearchClientCell: Rswift.ReuseIdentifier<HYSearchClientCell> = Rswift.ReuseIdentifier(identifier: "HYSearchClientCell")
    /// Reuse identifier `HYSearchProjectCell`.
    static let hySearchProjectCell: Rswift.ReuseIdentifier<HYSearchProjectCell> = Rswift.ReuseIdentifier(identifier: "HYSearchProjectCell")
    /// Reuse identifier `MyCustomListCell`.
    static let myCustomListCell: Rswift.ReuseIdentifier<MyCustomListCell> = Rswift.ReuseIdentifier(identifier: "MyCustomListCell")
    /// Reuse identifier `ProPlanDetailDefaultCell`.
    static let proPlanDetailDefaultCell: Rswift.ReuseIdentifier<ProPlanDetailDefaultCell> = Rswift.ReuseIdentifier(identifier: "ProPlanDetailDefaultCell")
    /// Reuse identifier `ProPlanDetailDesCell`.
    static let proPlanDetailDesCell: Rswift.ReuseIdentifier<ProPlanDetailDesCell> = Rswift.ReuseIdentifier(identifier: "ProPlanDetailDesCell")
    /// Reuse identifier `QFAnalysisHistoryCell`.
    static let qfAnalysisHistoryCell: Rswift.ReuseIdentifier<QFAnalysisHistoryCell> = Rswift.ReuseIdentifier(identifier: "QFAnalysisHistoryCell")
    /// Reuse identifier `QFChooseDepCell`.
    static let qfChooseDepCell: Rswift.ReuseIdentifier<QFChooseDepCell> = Rswift.ReuseIdentifier(identifier: "QFChooseDepCell")
    /// Reuse identifier `QFFollowUpProjectCell`.
    static let qfFollowUpProjectCell: Rswift.ReuseIdentifier<QFFollowUpProjectCell> = Rswift.ReuseIdentifier(identifier: "QFFollowUpProjectCell")
    /// Reuse identifier `QFMaskSortCell`.
    static let qfMaskSortCell: Rswift.ReuseIdentifier<QFMaskSortCell> = Rswift.ReuseIdentifier(identifier: "QFMaskSortCell")
    /// Reuse identifier `cellRight`.
    static let cellRight: Rswift.ReuseIdentifier<QFProductRightCell> = Rswift.ReuseIdentifier(identifier: "cellRight")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `CustomPool`.
    static let customPool = _R.storyboard.customPool()
    /// Storyboard `Mine`.
    static let mine = _R.storyboard.mine()
    
    /// `UIStoryboard(name: "CustomPool", bundle: ...)`
    static func customPool(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.customPool)
    }
    
    /// `UIStoryboard(name: "Mine", bundle: ...)`
    static func mine(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mine)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _HYNewClientVC.validate()
      try _ObjCClassTreeNodeView.validate()
      try _FitlerRightCell.validate()
      try _QFDepCell.validate()
      try _QFAddDepVC.validate()
      try _AddProductVC.validate()
      try _QFMaskSortCell.validate()
      try _HYBoltingDepMemberCell.validate()
      try _HYNewProjectTopView.validate()
      try _MailConfigVC.validate()
      try _HYContactNewCell.validate()
      try _QFChooseDepCell.validate()
      try _RankingListCell.validate()
      try _ProduceCell.validate()
      try _QFPersonnelVC.validate()
      try _QFAnalysisHistoryCell.validate()
      try _PraiseCell.validate()
      try _GroupIsOpenVC.validate()
      try _HYSearchClientCell.validate()
      try _HYClientPoolCell.validate()
      try _DepartmentCell.validate()
      try _CustomPool.validate()
      try _VisitReportCellBottomView.validate()
      try _HYCarryDownHeadView.validate()
      try _HYProjectCell.validate()
      try _ProPlanDetailDefaultCell.validate()
      try _AgencyTradeCell.validate()
      try _AddcontactView.validate()
      try _HYContactEditNewCell.validate()
      try _HYAddContactVC.validate()
      try _RightCell.validate()
      try _HYFenXiHeaderV.validate()
    }
    
    struct _AddProductVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddProductVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ch_add_product_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ch_add_product_icon' is used in nib 'AddProductVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AddcontactView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddcontactView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AddcontactView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddcontactView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "dxNormal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dxNormal' is used in nib 'AddcontactView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AgencyAdressCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AgencyAdressCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AgencyAdressCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AgencyAdressCell
      }
      
      fileprivate init() {}
    }
    
    struct _AgencyInfoCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AgencyInfoCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AgencyInfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AgencyInfoCell
      }
      
      fileprivate init() {}
    }
    
    struct _AgencyTradeCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AgencyTradeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AgencyTradeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AgencyTradeCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "cSanjiao", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cSanjiao' is used in nib 'AgencyTradeCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _BaseSearchView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BaseSearchView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BaseSearchView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BaseSearchView
      }
      
      fileprivate init() {}
    }
    
    struct _BaseTableCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BaseTableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BaseTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BaseTableCell
      }
      
      fileprivate init() {}
    }
    
    struct _CLDatePicker: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CLDatePicker"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CLDatePicker? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CLDatePicker
      }
      
      fileprivate init() {}
    }
    
    struct _CanBackWebVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CanBackWebVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ChatContentCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ChatContentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ChatContentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatContentCell
      }
      
      fileprivate init() {}
    }
    
    struct _CustomPool: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CustomPool"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CustomMergeView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? CustomMergeView
      }
      
      func thirdView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CustomMergeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[2] as? CustomMergeCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "qf_select_statuschoose", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qf_select_statuschoose' is used in nib 'CustomPool', but couldn't be loaded.") }
        if UIKit.UIImage(named: "QFContactshut", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'QFContactshut' is used in nib 'CustomPool', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qf_select_statusdefault", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qf_select_statusdefault' is used in nib 'CustomPool', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _DatePicker: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DatePicker"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DatePicker? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DatePicker
      }
      
      fileprivate init() {}
    }
    
    struct _DepartmentCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DepartmentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DepartmentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DepartmentCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ch_delete_ico", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ch_delete_ico' is used in nib 'DepartmentCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "QFCheckDep", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'QFCheckDep' is used in nib 'DepartmentCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "QFnoCheckDep", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'QFnoCheckDep' is used in nib 'DepartmentCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "reSend", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'reSend' is used in nib 'DepartmentCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EffectSummaryCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EffectSummaryCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EffectSummaryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EffectSummaryCell
      }
      
      fileprivate init() {}
    }
    
    struct _EnterpriseManagementVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EnterpriseManagementVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _FitlerRightCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FitlerRightCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FitlerRightCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FitlerRightCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "rightArrow24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rightArrow24' is used in nib 'FitlerRightCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "changeStage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'changeStage' is used in nib 'FitlerRightCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _GroupIsOpenVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GroupIsOpenVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "isOpen_normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'isOpen_normal' is used in nib 'GroupIsOpenVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "isClose_select", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'isClose_select' is used in nib 'GroupIsOpenVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HYAddContactVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HYAddContactVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "add.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add.png' is used in nib 'HYAddContactVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "theme_rightArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'theme_rightArrow' is used in nib 'HYAddContactVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HYAddTagVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HYAddTagVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _HYBoltingDepMemberCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HYBoltingDepMemberCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYBoltingDepMemberCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYBoltingDepMemberCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow' is used in nib 'HYBoltingDepMemberCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HYCarryDownCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HYCarryDownCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYCarryDownCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYCarryDownCell
      }
      
      fileprivate init() {}
    }
    
    struct _HYCarryDownHeadView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HYCarryDownHeadView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYCarryDownHeadView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYCarryDownHeadView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "p_show0", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'p_show0' is used in nib 'HYCarryDownHeadView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "p_show1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'p_show1' is used in nib 'HYCarryDownHeadView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HYClientPoolCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HYClientPoolCell
      
      let bundle = R.hostingBundle
      let identifier = "HYClientPoolCell"
      let name = "HYClientPoolCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYClientPoolCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYClientPoolCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "qf_select_statusdefault", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qf_select_statusdefault' is used in nib 'HYClientPoolCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HYContactEditNewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HYContactEditNewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYContactEditNewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYContactEditNewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "qf_select_statusdefault", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qf_select_statusdefault' is used in nib 'HYContactEditNewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HYContactNewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HYContactNewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYContactNewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYContactNewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ch_call_phone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ch_call_phone' is used in nib 'HYContactNewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HYCustomerDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HYCustomerDetailCell
      
      let bundle = R.hostingBundle
      let identifier = "HYCustomerDetailCell"
      let name = "HYCustomerDetailCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYCustomerDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYCustomerDetailCell
      }
      
      fileprivate init() {}
    }
    
    struct _HYFenXiHeaderV: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HYFenXiHeaderV"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYFenXiHeaderV? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYFenXiHeaderV
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "qf_line_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qf_line_green' is used in nib 'HYFenXiHeaderV', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow' is used in nib 'HYFenXiHeaderV', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HYNewClientVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HYNewClientVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "add.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add.png' is used in nib 'HYNewClientVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qichacha", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qichacha' is used in nib 'HYNewClientVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HYNewProjectTopView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HYNewProjectTopView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYNewProjectTopView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYNewProjectTopView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "contact_company", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'contact_company' is used in nib 'HYNewProjectTopView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HYProjectAnalysisCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HYProjectAnalysisCell
      
      let bundle = R.hostingBundle
      let identifier = "HYProjectAnalysisCell"
      let name = "HYProjectAnalysisCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYProjectAnalysisCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYProjectAnalysisCell
      }
      
      fileprivate init() {}
    }
    
    struct _HYProjectCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HYProjectCell
      
      let bundle = R.hostingBundle
      let identifier = "HYProjectCell"
      let name = "HYProjectCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYProjectCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYProjectCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "qf_project4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qf_project4' is used in nib 'HYProjectCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HYScheduleDayListCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HYScheduleDayListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYScheduleDayListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYScheduleDayListCell
      }
      
      fileprivate init() {}
    }
    
    struct _HYScheduleListCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HYScheduleListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYScheduleListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYScheduleListCell
      }
      
      fileprivate init() {}
    }
    
    struct _HYSearchClientCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HYSearchClientCell
      
      let bundle = R.hostingBundle
      let identifier = "HYSearchClientCell"
      let name = "HYSearchClientCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYSearchClientCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYSearchClientCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow' is used in nib 'HYSearchClientCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HYSearchProjectCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HYSearchProjectCell
      
      let bundle = R.hostingBundle
      let identifier = "HYSearchProjectCell"
      let name = "HYSearchProjectCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYSearchProjectCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYSearchProjectCell
      }
      
      fileprivate init() {}
    }
    
    struct _HYSechduleSearchCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HYSechduleSearchCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYSechduleSearchCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYSechduleSearchCell
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _HYVisitAnalysisCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HYVisitAnalysisCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HYVisitAnalysisCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HYVisitAnalysisCell
      }
      
      fileprivate init() {}
    }
    
    struct _LeftCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LeftCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LeftCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeftCell
      }
      
      fileprivate init() {}
    }
    
    struct _MailConfigVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MailConfigVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "visit_check_normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visit_check_normal' is used in nib 'MailConfigVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MineReviseVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MineReviseVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ObjCClassTreeNodeView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ObjCClassTreeNodeView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyLeafView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyLeafView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "TreeViewSubtreeExpandedButton.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TreeViewSubtreeExpandedButton.png' is used in nib 'ObjCClassTreeNodeView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderEmailVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderEmailVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _PasteView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PasteView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PasteView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PasteView
      }
      
      fileprivate init() {}
    }
    
    struct _PraiseCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PraiseCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PraiseCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PraiseCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "rightArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rightArrow' is used in nib 'PraiseCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ProPlanDetailDefaultCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProPlanDetailDefaultCell
      
      let bundle = R.hostingBundle
      let identifier = "ProPlanDetailDefaultCell"
      let name = "ProPlanDetailDefaultCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProPlanDetailDefaultCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProPlanDetailDefaultCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow' is used in nib 'ProPlanDetailDefaultCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ProPlanDetailDesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProPlanDetailDesCell
      
      let bundle = R.hostingBundle
      let identifier = "ProPlanDetailDesCell"
      let name = "ProPlanDetailDesCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProPlanDetailDesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProPlanDetailDesCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProduceCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProduceCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProduceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProduceCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ch_product_edit_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ch_product_edit_icon' is used in nib 'ProduceCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ProjectDetailCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProjectDetailCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProjectDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProjectDetailCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProjectDetailVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProjectDetailVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _QFAddDepVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QFAddDepVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow' is used in nib 'QFAddDepVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "projectUpDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'projectUpDown' is used in nib 'QFAddDepVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _QFAnalysisHistoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = QFAnalysisHistoryCell
      
      let bundle = R.hostingBundle
      let identifier = "QFAnalysisHistoryCell"
      let name = "QFAnalysisHistoryCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> QFAnalysisHistoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QFAnalysisHistoryCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow' is used in nib 'QFAnalysisHistoryCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _QFChooseDepCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = QFChooseDepCell
      
      let bundle = R.hostingBundle
      let identifier = "QFChooseDepCell"
      let name = "QFChooseDepCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> QFChooseDepCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QFChooseDepCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow' is used in nib 'QFChooseDepCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qf_depImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qf_depImage' is used in nib 'QFChooseDepCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _QFDepCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QFDepCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> QFDepCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QFDepCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ch_delete_ico", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ch_delete_ico' is used in nib 'QFDepCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ch_product_edit_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ch_product_edit_icon' is used in nib 'QFDepCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qf_depImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qf_depImage' is used in nib 'QFDepCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow' is used in nib 'QFDepCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _QFFollowUpProjectCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = QFFollowUpProjectCell
      
      let bundle = R.hostingBundle
      let identifier = "QFFollowUpProjectCell"
      let name = "QFFollowUpProjectCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> QFFollowUpProjectCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QFFollowUpProjectCell
      }
      
      fileprivate init() {}
    }
    
    struct _QFMaskSortCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = QFMaskSortCell
      
      let bundle = R.hostingBundle
      let identifier = "QFMaskSortCell"
      let name = "QFMaskSortCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> QFMaskSortCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QFMaskSortCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "p_menu_button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'p_menu_button' is used in nib 'QFMaskSortCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "p_m_s_edittime", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'p_m_s_edittime' is used in nib 'QFMaskSortCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "p_menu_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'p_menu_down' is used in nib 'QFMaskSortCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _QFPersonnelVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QFPersonnelVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "QFBatchMessage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'QFBatchMessage' is used in nib 'QFPersonnelVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "QFBatchMove", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'QFBatchMove' is used in nib 'QFPersonnelVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _QFProductRightCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = QFProductRightCell
      
      let bundle = R.hostingBundle
      let identifier = "cellRight"
      let name = "QFProductRightCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> QFProductRightCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QFProductRightCell
      }
      
      fileprivate init() {}
    }
    
    struct _QFVcardVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QFVcardVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _RankingListCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RankingListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RankingListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RankingListCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "medals1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'medals1' is used in nib 'RankingListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ch_product_edit_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ch_product_edit_icon' is used in nib 'RankingListCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _RightCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RightCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RightCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RightCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "changeStage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'changeStage' is used in nib 'RightCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SortAddressVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SortAddressVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ThemeListCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ThemeListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ThemeListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ThemeListCell
      }
      
      fileprivate init() {}
    }
    
    struct _ToSetPermanceCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ToSetPermanceCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ToSetPermanceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToSetPermanceCell
      }
      
      fileprivate init() {}
    }
    
    struct _ToViewOtherPerformanceVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ToViewOtherPerformanceVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _VisitReportCellBottomView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VisitReportCellBottomView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> VisitReportCellBottomView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VisitReportCellBottomView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "report_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'report_share' is used in nib 'VisitReportCellBottomView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "report_delect", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'report_delect' is used in nib 'VisitReportCellBottomView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "report_download", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'report_download' is used in nib 'VisitReportCellBottomView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try mine.validate()
      try customPool.validate()
    }
    
    struct customPool: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CustomPoolListViewController
      
      let bundle = R.hostingBundle
      let createCustomViewController = StoryboardViewControllerResource<CreateCustomViewController>(identifier: "CreateCustomViewController")
      let customDetailPersonsViewController = StoryboardViewControllerResource<CustomDetailPersonsViewController>(identifier: "CustomDetailPersonsViewController")
      let customDetailViewController = StoryboardViewControllerResource<CustomDetailViewController>(identifier: "CustomDetailViewController")
      let customMergeViewController = StoryboardViewControllerResource<CustomMergeViewController>(identifier: "CustomMergeViewController")
      let customPoolDeleteContactsViewController = StoryboardViewControllerResource<CustomPoolDeleteContactsViewController>(identifier: "CustomPoolDeleteContactsViewController")
      let customPoolRecycleListViewController = StoryboardViewControllerResource<CustomPoolRecycleListViewController>(identifier: "CustomPoolRecycleListViewController")
      let customPoolSearchViewController = StoryboardViewControllerResource<CustomPoolSearchViewController>(identifier: "CustomPoolSearchViewController")
      let myCustomListViewController = StoryboardViewControllerResource<MyCustomListViewController>(identifier: "MyCustomListViewController")
      let name = "CustomPool"
      let scanNameCardViewController = StoryboardViewControllerResource<ScanNameCardViewController>(identifier: "ScanNameCardViewController")
      
      func createCustomViewController(_: Void = ()) -> CreateCustomViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createCustomViewController)
      }
      
      func customDetailPersonsViewController(_: Void = ()) -> CustomDetailPersonsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customDetailPersonsViewController)
      }
      
      func customDetailViewController(_: Void = ()) -> CustomDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customDetailViewController)
      }
      
      func customMergeViewController(_: Void = ()) -> CustomMergeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customMergeViewController)
      }
      
      func customPoolDeleteContactsViewController(_: Void = ()) -> CustomPoolDeleteContactsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customPoolDeleteContactsViewController)
      }
      
      func customPoolRecycleListViewController(_: Void = ()) -> CustomPoolRecycleListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customPoolRecycleListViewController)
      }
      
      func customPoolSearchViewController(_: Void = ()) -> CustomPoolSearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customPoolSearchViewController)
      }
      
      func myCustomListViewController(_: Void = ()) -> MyCustomListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myCustomListViewController)
      }
      
      func scanNameCardViewController(_: Void = ()) -> ScanNameCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scanNameCardViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ch_call_phone") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ch_call_phone' is used in storyboard 'CustomPool', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search_gray' is used in storyboard 'CustomPool', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qf_consult_img") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qf_consult_img' is used in storyboard 'CustomPool', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qf_select_statusdefault") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qf_select_statusdefault' is used in storyboard 'CustomPool', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qf_select_statuschoose") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qf_select_statuschoose' is used in storyboard 'CustomPool', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qichacha") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qichacha' is used in storyboard 'CustomPool', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qf_web_next") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qf_web_next' is used in storyboard 'CustomPool', but couldn't be loaded.") }
        if _R.storyboard.customPool().customPoolRecycleListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customPoolRecycleListViewController' could not be loaded from storyboard 'CustomPool' as 'CustomPoolRecycleListViewController'.") }
        if _R.storyboard.customPool().myCustomListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myCustomListViewController' could not be loaded from storyboard 'CustomPool' as 'MyCustomListViewController'.") }
        if _R.storyboard.customPool().scanNameCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scanNameCardViewController' could not be loaded from storyboard 'CustomPool' as 'ScanNameCardViewController'.") }
        if _R.storyboard.customPool().customDetailPersonsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customDetailPersonsViewController' could not be loaded from storyboard 'CustomPool' as 'CustomDetailPersonsViewController'.") }
        if _R.storyboard.customPool().customPoolDeleteContactsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customPoolDeleteContactsViewController' could not be loaded from storyboard 'CustomPool' as 'CustomPoolDeleteContactsViewController'.") }
        if _R.storyboard.customPool().customDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customDetailViewController' could not be loaded from storyboard 'CustomPool' as 'CustomDetailViewController'.") }
        if _R.storyboard.customPool().customMergeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customMergeViewController' could not be loaded from storyboard 'CustomPool' as 'CustomMergeViewController'.") }
        if _R.storyboard.customPool().createCustomViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createCustomViewController' could not be loaded from storyboard 'CustomPool' as 'CreateCustomViewController'.") }
        if _R.storyboard.customPool().customPoolSearchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customPoolSearchViewController' could not be loaded from storyboard 'CustomPool' as 'CustomPoolSearchViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct mine: Rswift.StoryboardResourceType, Rswift.Validatable {
      let aboutUsVC = StoryboardViewControllerResource<AboutUsVC>(identifier: "AboutUsVC")
      let bundle = R.hostingBundle
      let feedBackVC = StoryboardViewControllerResource<FeedBackVC>(identifier: "FeedBackVC")
      let mineVC = StoryboardViewControllerResource<SLAPP.MineVC>(identifier: "MineVC")
      let name = "Mine"
      let personalInfoVC = StoryboardViewControllerResource<PersonalInfoVC>(identifier: "PersonalInfoVC")
      
      func aboutUsVC(_: Void = ()) -> AboutUsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutUsVC)
      }
      
      func feedBackVC(_: Void = ()) -> FeedBackVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: feedBackVC)
      }
      
      func mineVC(_: Void = ()) -> SLAPP.MineVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mineVC)
      }
      
      func personalInfoVC(_: Void = ()) -> PersonalInfoVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: personalInfoVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "left") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left' is used in storyboard 'Mine', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rightArrows") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rightArrows' is used in storyboard 'Mine', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right' is used in storyboard 'Mine', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cl_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cl_icon' is used in storyboard 'Mine', but couldn't be loaded.") }
        if _R.storyboard.mine().aboutUsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutUsVC' could not be loaded from storyboard 'Mine' as 'AboutUsVC'.") }
        if _R.storyboard.mine().mineVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mineVC' could not be loaded from storyboard 'Mine' as 'SLAPP.MineVC'.") }
        if _R.storyboard.mine().feedBackVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'feedBackVC' could not be loaded from storyboard 'Mine' as 'FeedBackVC'.") }
        if _R.storyboard.mine().personalInfoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'personalInfoVC' could not be loaded from storyboard 'Mine' as 'PersonalInfoVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
