//
//  NewProjectViewController.swift
//  SLAPP
//
//  Created by 柴进 on 2018/3/27.
//  Copyright © 2018年 柴进. All rights reserved.
//

import UIKit
import SwiftyJSON
class NewProjectViewController: BaseVC,UITableViewDelegate,UITableViewDataSource {
    
    
    
    var userid:String = UserModel.getUserModel().id!
    var tableView : UITableView!//列表
    var cancleBtn : UIButton!//取消按钮
    var saveBtn : UIButton!//保存按钮
    var sectionNum : Int!//行数，用于判断展示更多信息
    var footImgV : UIImageView!//说明展开情况的界面
    var footTextLabel : UILabel!//说明展开文字
    var projectId : String?//历史
    var datasourceEditArr : Array<Array<Dictionary<String,String>>>! //修改
    var datasourceArr = Array<Array<Dictionary<String,String>>>() //新增
    var selectedCustomerId : String? = ""//联系人id
    var selectedContactId : String? = ""//客户id
    var selectedCustomerName : String? = ""//联系人姓名
    var selectedContactName : String? = ""//客户名称
//    var firsttrade = ("","")//行业
//    var secondtrade:(String,String)? = nil//二级行业
    var tradeId = ""//行业id
    var tradeParentId = ""//行业id
    var vModel = ProjectSituationViewModel()//选人数据
    
    var allProduct_lineModel = Array<Product_lineModel>()//所有产品列表
    let chooseVc = ChooseProductVC()//选产品界面
    var productArray = Array<Dictionary<String,String>>()//选中产品列表
    var selectContactArr = Array<Dictionary<String,String>>()//选中其他联系人列表
    var productStr = ""//选中产品文字
    
    var timerIntStr = 0//日期
    var isNeedUpdate:Bool = false //是否需要更新
    
    var needUpdate = {
        
    }
    //保存产品信息
    var upProductInfo:(_ array:Array<Dictionary<String,String>>)->() = {_ in
        
    }
    override func viewDidLoad() {
        super.viewDidLoad()
        if projectId != nil {
            self.title = "修改项目"
        }else{
            self.title = "新增项目"
        }
        self.sectionNum = 1
        self.configData()
        self.configUI()
         self.configBackItem()
    }
    
    override func backBtnClick() {
        if self.isNeedUpdate {
            needUpdate()
        }
        self.navigationController?.popViewController(animated: true)
    }
    
    fileprivate func getAllProduct(success:(()->())?) {
        LoginRequest.getPost(methodName: PRODUCTS_LIST, params: [kToken:UserModel.getUserModel().token as Any], hadToast: true, fail: { (dic) in
            DLog(dic)
            PublicMethod.dismissWithError()
        }) { (dic) in
            DLog(dic)
            PublicMethod.dismiss()
            let array:Array<Dictionary<String,Any>> = dic["data"] as! Array<Dictionary<String, Any>>
            var data = Array<Product_lineModel>()
            for oneP in array{
                let model = Product_lineModel.deserialize(from: oneP)
//                DLog(model)
                data.append(model!)
            }
            self.allProduct_lineModel = data
            if success != nil{
                success!()
            }
//            if self.productArray.count != 0{
//                self.chooseVc.alreadyArray = self.productArray
//            }
//            self.chooseVc.alldata = data
//            self.chooseVc.resultArray = {array in
//                self.productCallBackWithArray(array: array)
//            }
//            self.navigationController?.pushViewController(self.chooseVc, animated: true)
        }
    }
    func willShowProductView() {
        if allProduct_lineModel.count == 0 {
            getAllProduct {
                self.showProductView()
            }
        }else{
            showProductView()
        }
    }
    func showProductView(){
        
        if self.productArray.count != 0{
            self.chooseVc.alreadyArray = self.productArray
        }
        self.chooseVc.alldata = allProduct_lineModel
        self.chooseVc.resultArray = {array in
            self.productCallBackWithArray(array: array)
        }
        self.navigationController?.pushViewController(self.chooseVc, animated: true)
    }
    
    func configData(){
        if projectId != nil { //修改页面
            
            self.datasourceArr = datasourceEditArr
        }else{
            self.datasourceArr = [[["项目名称:":""],["联系人:":""],["手机号:":""],["客户名称:":""],["所属行业:":""],["产品/服务:":""],["合同额:":""],["预计实现业绩:":""],["预计成交时间:":""]],[["参与人":""],["观察员":""],["联系人":""]]]
        }
        
        getAllProduct(success: nil)
        
    }
    func configUI() {
        tableView = UITableView.init(frame: CGRect.init(x: 0, y: 0, width: MAIN_SCREEN_WIDTH, height: MAIN_SCREEN_HEIGHT_PX - NAV_HEIGHT - 40), style: .grouped)
        tableView.separatorStyle = .none
        tableView.backgroundColor = UIColor.groupTableViewBackground
        tableView.delegate = self
        tableView.dataSource = self
        self.view.addSubview(tableView)
        tableView.tableFooterView = self.changeTableFooterView()
        cancleBtn = UIButton.init(frame: CGRect.init(x: 0, y: tableView.height, width: self.view.frame.size.width * 0.5, height: 40))
        cancleBtn.setTitle("取消", for: .normal)
        cancleBtn.backgroundColor = UIColor.gray
        cancleBtn.addTarget(self, action:  #selector(cancleBtnClick), for: .touchUpInside)
        saveBtn = UIButton.init(frame: CGRect.init(x: self.view.frame.size.width * 0.5, y: tableView.height, width: self.view.frame.size.width * 0.5, height: 40))
        saveBtn.setTitle("保存", for: .normal)
        saveBtn.backgroundColor = UIColor.init(hexString: "30b475")
        saveBtn.addTarget(self, action:  #selector(saveBtnClick), for: .touchUpInside)
        
        self.view.addSubview(cancleBtn)
        self.view.addSubview(saveBtn)
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return self.sectionNum
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.datasourceArr[section].count
    }
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        if section == 0{
            return nil
        }else{
            let headerView = UIView.init(frame: CGRect.init(x: 0, y: 15, width: tableView.width, height: 25))
            let seperateLine = UIView.init(frame: CGRect.init(x: LEFT_PADDING, y: 0, width: tableView.width - 2 * LEFT_PADDING, height: 1))
            seperateLine.backgroundColor = kSepLineColor
            seperateLine.centerY = headerView.centerY
            headerView.addSubview(seperateLine)
            let label = UILabel.init(frame: CGRect.init(x: 0, y: 15, width: 200, height: 40))
            label.backgroundColor = tableView.backgroundColor
            label.textColor = UIColor.gray
            label.text = "更多信息"
            label.textAlignment = .center
            label.sizeToFit()
            label.width += 20
            label.height = headerView.height
            label.centerX = view.centerX
            headerView.addSubview(label)
            return headerView
        }
    }
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        return nil
    }
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        if section == 0{
            return 0.1
        }else{
            return 40
        }
    }
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return 0.1
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if indexPath.section == 1{
            return self.vModel.membersHeight[indexPath.row]
        }
        return  60
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var cell : ContactAddBaseCell?
        if indexPath.section == 0{
            if indexPath.row == 3{
                cell = tableView.dequeueReusableCell(withIdentifier: "ContactAddCompanyCell") as? ContactAddCompanyCell
                if cell == nil{
                    cell = ContactAddCompanyCell.init(style: .default, reuseIdentifier: "ContactAddCompanyCell")
                }
                cell?.companyBtnClickBlock = ({ [weak self] in
                    let vc = SelectCustomerVC()
                    vc.selectCustomerId = { [weak self](customerId,customerName) in
                        self?.selectedContactId = customerId
                        self?.selectedContactName = customerName
                        self?.datasourceArr[indexPath.section][indexPath.row].updateValue(customerName, forKey: (self?.datasourceArr[indexPath.section][indexPath.row].keys.first)!)
//                        if self?.datasourceArr[indexPath.section][indexPath.row + 1].keys.first == "行业:"{
//                            self?.datasourceArr[indexPath.section].remove(at: indexPath.row + 1)
//                        }
                        LoginRequest.getPost(methodName: CLIENT_DETAIL, params: [kToken:UserModel.getUserModel().token ?? "","id":customerId], hadToast: true, fail: { (dic) in
                            self?.datasourceArr[indexPath.section][indexPath.row+3].updateValue("", forKey: (self?.datasourceArr[indexPath.section][indexPath.row+3].keys.first)!)
                        }) { (dic) in
                            DLog(dic)
                            if !(dic["trade_id"] is NSNull){
                                self?.tradeId = dic["trade_id"]  as! String
                                self?.datasourceArr[0][4].updateValue(dic["trade_name"]  as! String, forKey: (self?.datasourceArr[0][4].keys.first)!)
                            }
                            self?.tableView.reloadData()
                        }
                        self?.tableView.reloadData()
                    }
                    self?.navigationController?.pushViewController(vc, animated: true)
                    
                })
                
            }else if indexPath.row == 1{
                cell = tableView.dequeueReusableCell(withIdentifier: "ContactAddCompanyCell") as? ContactAddCompanyCell
                if cell == nil{
                    cell = ContactAddCompanyCell.init(style: .default, reuseIdentifier: "ContactAddCompanyCell")
                }
                cell?.companyBtnClickBlock = ({ [weak self] in
                    let vc = SelectContactVC()
                    vc.currentCustomerId = (self?.selectedContactId)!
                    vc.selectCustomerId = { [weak self](customerId,customerName,client_id,client_name,phoneNum,position_name) in
                        self?.selectedCustomerId = customerId
                        self?.selectedCustomerName = customerName
                        self?.selectedContactId = client_id
                        self?.selectedContactName = client_name
                        self?.datasourceArr[indexPath.section][indexPath.row].updateValue(customerName, forKey: (self?.datasourceArr[indexPath.section][indexPath.row].keys.first)!)
                        self?.datasourceArr[indexPath.section][indexPath.row+2].updateValue(client_name, forKey: (self?.datasourceArr[indexPath.section][indexPath.row+2].keys.first)!)
                        self?.datasourceArr[indexPath.section][indexPath.row+1].updateValue(phoneNum, forKey: (self?.datasourceArr[indexPath.section][indexPath.row+1].keys.first)!)
//                        self?.datasourceArr[indexPath.section][indexPath.row+3].updateValue("获取中...", forKey: (self?.datasourceArr[indexPath.section][indexPath.row+3].keys.first)!)
                        
                        LoginRequest.getPost(methodName: CLIENT_DETAIL, params: [kToken:UserModel.getUserModel().token ?? "","id":client_id], hadToast: true, fail: { (dic) in
                            self?.datasourceArr[indexPath.section][indexPath.row+3].updateValue("", forKey: (self?.datasourceArr[indexPath.section][indexPath.row+3].keys.first)!)
                        }) { (dic) in
                            if !(dic["trade_id"] is NSNull){
                                self?.tradeId = dic["trade_id"]  as! String
                                self?.datasourceArr[0][4].updateValue(dic["trade_name"]  as! String, forKey: (self?.datasourceArr[0][4].keys.first)!)
                            }
                            self?.tableView.reloadData()
                        }
                        self?.tableView.reloadData()
                    }
                    self?.navigationController?.pushViewController(vc, animated: true)
                    
                })
                
            }else{
                cell = tableView.dequeueReusableCell(withIdentifier: "ContactAddBaseCell") as? ContactAddBaseCell
                if cell == nil{
                    cell = ContactAddBaseCell.init(style: .default, reuseIdentifier: "ContactAddBaseCell")
                    
                }
            }
        }else{
            return self.configNoCheckCell(indexPath: indexPath, tableView: tableView)
        }
        
        cell?.textChangeBlock = ({ [weak self]text in
            if indexPath.section == 0 && indexPath.row == 2{
                if text != self?.selectedCustomerName{
                    self?.selectedCustomerId = ""
                }
//                if text != "" && self?.selectedCustomerId == ""{
//                    if self?.datasourceArr[indexPath.section][indexPath.row + 1].keys.first != "行业:"{
//                        self?.datasourceArr[indexPath.section].insert(["行业:":""], at: indexPath.row + 1)
//                        self?.tableView.reloadData()
//                    }
//                }
            }
            self?.datasourceArr[indexPath.section][indexPath.row].updateValue(text, forKey: (self?.datasourceArr[indexPath.section][indexPath.row].keys.first)!)
        })
        cell?.titleLb.text = self.datasourceArr[indexPath.section][indexPath.row].keys.first
        cell?.detailTf.text = self.datasourceArr[indexPath.section][indexPath.row].values.first
        //[["项目名称:":""],["联系人:":""],["手机号:":""],["客户名称:":""],["所属行业:":""],["产品/服务:":""],["合同额:":""],["预计实现业绩:":""],["预计成交时间:":""]]
//        cell?.titleLb.font = kFont_Big
        cell?.detailTf.isUserInteractionEnabled = false
        
        switch (cell?.titleLb.text)! {
        case "预计实现业绩:":
            cell?.detailTf.placeholder = "请填写预计实现的业绩"
            cell?.detailTf.isUserInteractionEnabled = true
//            cell?.titleLb.font = kFont_Small
            if (cell?.detailTf.text?.count)!>0{
                cell?.detailTf.text = String.init(format: "%@(万)", (cell?.detailTf.text)!)
            }
        case "预计成交时间:":
            cell?.detailTf.placeholder = "请选择预计成交的时间"
//            cell?.titleLb.font = kFont_Small
        case "项目名称:":
            cell?.detailTf.placeholder = "请输入项目名称"
            cell?.detailTf.isUserInteractionEnabled = true
        case "联系人:":
            cell?.detailTf.placeholder = "请输入或选择联系人"
            cell?.detailTf.isUserInteractionEnabled = true
            cell?.detailTf.reactive.continuousTextValues.observeValues({ (text) in
                if text != self.selectedCustomerName {
                    self.selectedCustomerId = ""
                    self.selectedCustomerName = text
                }
            })
        case "手机号:":
            cell?.detailTf.placeholder = "请输入手机号"
            cell?.detailTf.isUserInteractionEnabled = true
        case "客户名称:":
            cell?.detailTf.placeholder = "请输入客户公司名称"
            cell?.detailTf.isUserInteractionEnabled = true
            cell?.detailTf.reactive.continuousTextValues.observeValues({ (text) in
                if text != self.selectedContactName {
                    self.selectedContactId = ""
                    self.selectedContactName = text
                    
                }
            })
        case "所属行业:":
            cell?.detailTf.placeholder = "请选择客户所属行业"
        case "产品/服务:":
            cell?.detailTf.placeholder = "请选择为客户提供的产品/服务"
        case "合同额:":
            cell?.detailTf.placeholder = "请填写合同额"
            if (cell?.detailTf.text?.count)!>0{
                cell?.detailTf.text = String.init(format: "%@(万)", (cell?.detailTf.text)!)
            }
        default:
            cell?.detailTf.placeholder = ""
            break
        }
        return cell!
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        DLog(indexPath)
        switch (self.datasourceArr[indexPath.section][indexPath.row].keys.first)! {
        case "预计实现业绩:": break
        case "预计成交时间:":
            let picker = Bundle.main.loadNibNamed("DatePicker", owner: self, options: nil)?.last as? DatePicker
            picker?.showInVC(view: view)
           
            if self.timerIntStr == 0 {
                picker?.datePicker.date = Date.init(timeIntervalSinceNow: 0)
            }else{
                picker?.datePicker.date = Date.init(timeIntervalSince1970: TimeInterval(self.timerIntStr))
            }
            
            picker?.resultTimeStr = {timerStr,timerInt in
                DLog(timerStr)
                self.datasourceArr[indexPath.section][indexPath.row].updateValue(timerStr!, forKey: (self.datasourceArr[indexPath.section][indexPath.row].keys.first)!)
                self.timerIntStr = timerInt
                self.tableView.reloadData()
            }
            break
        case "项目名称:": break
        case "联系人:":
            
            break
        case "手机号:": break
        case "客户名称:": break
        case "所属行业:":
            let tradeVC = ChooseTradeVC()
            tradeVC.qfTradeId = self.tradeId
            tradeVC.qfTradeParentId = self.tradeParentId
            
            tradeVC.result = {a in
                self.tradeId = a.index_id
                self.tradeParentId = a.parent_id
                self.datasourceArr[0][4].updateValue(a.name, forKey: (self.datasourceArr[0][4].keys.first)!)
                self.tableView.reloadData()
            }
            self.navigationController?.pushViewController(tradeVC, animated: true)
//            tradeVC.tradeId = sel
            break
        case "产品/服务:":
            willShowProductView()
            break
        case "合同额:":
            willShowProductView()
            break
        default:
            break
        }
    }
    
    @objc func saveBtnClick(btn:UIButton)  {
        
        if self.datasourceArr[0][0].values.first == ""{
            self.view.makeToast("姓名不能为空", duration: 1.0, position: self.view.center)
            return
        }
        /********  QF -- mark: 只有项目名称是必填项  **********/
//        if self.datasourceArr[0][1].values.first == ""{
//            self.view.makeToast("联系人不能为空", duration: 1.0, position: self.view.center)
//            return
//        }
//        if self.datasourceArr[0][2].values.first == ""{
//            self.view.makeToast("手机号不能为空", duration: 1.0, position: self.view.center)
//            return
//        }
//        if self.datasourceArr[0][3].values.first == ""{
//            self.view.makeToast("客户不能为空", duration: 1.0, position: self.view.center)
//            return
//        }
//        if self.tradeId == ""{
//            self.view.makeToast("所属行业不能为空", duration: 1.0, position: self.view.center)
//            return
//        }
//        if self.datasourceArr[0][6].values.first == ""{
//            self.view.makeToast("产品/服务不能为空", duration: 1.0, position: self.view.center)
//            return
//        }
//        if self.datasourceArr[0][7].values.first == ""{
//            self.view.makeToast("预计实现业绩不能为空", duration: 1.0, position: self.view.center)
//            return
//        }
        /********  QF -- mark: **********/
        
        
//        "contacts_id":self.selectedCustomerId!,
//        "contacts_phone":self.datasourceArr[0][2].values.first!,
//        "client_id":self.selectedContactId,
//        "client_name":self.datasourceArr[0][3].values.first!,
//        "trade_id":secondtrade!.0,
//        "trade_name":secondtrade!.1,
//        "product_line":SignTool.makeJsonStrWith(object: product_lineJson),
//        "amount":self.datasourceArr[0][6].values.first!,
//        "down_payment":self.datasourceArr[0][7].values.first!,
//        "dealtime":self.datasourceArr[0][8].values.first!,
        
        var product_lineJson = Array<Dictionary<String,String>>()
        for dic in productArray {
//            dic["id"] = model.id
//            dic["amount"] = model.amount
//            dic["products"] = model.name
           
            var priceString = "0"
            if dic["amount"] != nil {
                priceString = dic["amount"]!
            }else if dic["price"] != nil {
                priceString = dic["price"]!
            }
            
            product_lineJson.append(["id":dic["id"]!,"products":dic["products"]!,"price":priceString])
<<<<<<< HEAD

=======
            //price
>>>>>>> dddd
        }
        
        let arr0 = self.vModel.membersArray[0].map({ (model) -> String in
            return model.id!
        })
        var menStr0 = ""
        for oneStr in arr0{
            if oneStr == arr0.first{
                menStr0.append(oneStr)
            }else{
                menStr0.append(",")
                menStr0.append(oneStr)
            }
        }
        
        let arr1 = self.vModel.membersArray[1].map({ (model) -> String in
            return model.id!
        })
        var menStr1 = ""
        for oneStr in arr1{
            if oneStr == arr1.first{
                menStr1.append(oneStr)
            }else{
                menStr1.append(",")
                menStr1.append(oneStr)
            }
        }
        let arr2 = self.vModel.membersArray[2].map({ (model) -> String in
            return model.id!
        })
        var menStr2 = SignTool.makeJsonStrWith(object: selectContactArr)
//        for oneStr in arr2{
//            if oneStr == arr2.first{
//                menStr2.append(oneStr)
//            }else{
//                menStr2.append(",")
//                menStr2.append(oneStr)
//            }
//        }
        
//        let arr2 = self.vModel.membersArray[2].map({ (model) -> [String:String] in
//            return ["id":model.id!,"name":model.name!,"phone":model.classStr!]
//        })
        
        
        var params:Dictionary = ["name":self.datasourceArr[0][0].values.first!,
                                 "contacts_name":self.datasourceArr[0][1].values.first!,
                                 "contacts_id":self.selectedCustomerId!,
                                 "contacts_phone":self.datasourceArr[0][2].values.first!,
                                 "client_id":self.selectedContactId,
                                 "client_name":self.datasourceArr[0][3].values.first!,
                                 "trade_id":tradeId,
                                 "trade_name":self.datasourceArr[0][4].values.first!,
                                 "product_line":SignTool.makeJsonStrWith(object: product_lineJson),
                                 "amount":self.datasourceArr[0][6].values.first!,
                                 "down_payment":self.datasourceArr[0][7].values.first!,
                                 "dealtime":timerIntStr,
                                 "partners":menStr0,
                                 "observer":menStr1,
                                 "contacts":menStr2,
                                 "token":UserModel.getUserModel().token!] as [String : Any]
        
        var methodName = PROJECT_ADD_PROJECT
        if projectId != nil {
            params["project_id"] = projectId
            methodName = PROJECT_SAVE_PROJECT
        }
        LoginRequest.getPost(methodName: methodName, params: params, hadToast: true, fail: { (dic) in
            PublicMethod.dismissWithError()
        }) { [weak self](dic) in
            PublicMethod.dismissWithSuccess(str: "保存成功")
            //QF -- mark -- 保存产品信息
            self?.upProductInfo(product_lineJson)
            self?.needUpdate()
            
            if methodName == PROJECT_ADD_PROJECT{
                DLog(dic)
                self?.toProjectSituation(id:JSON(dic["data"]).stringValue)
            }else{
                self?.navigationController?.popViewController(animated: true)
            }
            
            
            
        }
    }
    
    //跳转到项目概况
    func toProjectSituation(id:String){
        self.isNeedUpdate = true
        PublicMethod.showProgress()
        LoginRequest.getPost(methodName: PROJECT_DETAIL, params: ["project_id":id].addToken(), hadToast: true, fail: { (dic) in
            PublicMethod.dismissWithError()
        }) { [weak self](dic) in
            PublicMethod.dismiss()
            if let model = ProjectSituationModel.deserialize(from: dic){
                let tab = ProjectSituationTabVC()
                tab.model = model; self?.navigationController?.pushViewController(tab, animated: true)
            }
        }
    }
    
    
    
    @objc func cancleBtnClick(btn:UIButton)  {
        self.navigationController?.popViewController(animated: true)
    }
    @objc func foldBtnClick(){
        if self.sectionNum == 1{
            self.sectionNum = 2
            footImgV.image = UIImage.init(named: "contact_up")
            footTextLabel.text = "只看基本信息"
        }else{
            self.sectionNum = 1
            footImgV.image = UIImage.init(named: "contact_down")
            footTextLabel.text = "更多信息"
        }
        self.tableView.reloadData()
    }
    func changeTableFooterView() -> UIView{
        
        let view = UIButton.init(frame: CGRect.init(x: 0, y: 0, width: tableView.width, height: 70))
        view.addTarget(self, action: #selector(foldBtnClick), for: .touchUpInside)
        
        let seperateLine = UIView.init(frame: CGRect.init(x: LEFT_PADDING, y: 20, width: tableView.width - 2 * LEFT_PADDING, height: 1))
        seperateLine.backgroundColor = kSepLineColor
        view.addSubview(seperateLine)
        footImgV = UIImageView.init(frame: CGRect.init(x: 0, y: 5, width: 30, height: 30))
        footImgV.backgroundColor = tableView.backgroundColor
        footImgV.image = UIImage.init(named: "contact_down")
        footImgV.contentMode = .center
        footImgV.centerX = view.centerX
        footImgV.centerY = seperateLine.centerY
        view.addSubview(footImgV)
        footTextLabel = UILabel.init(frame: CGRect.init(x: 0, y: footImgV.max_Y, width: view.width, height: 25))
        footTextLabel.backgroundColor = tableView.backgroundColor
        footTextLabel.textColor = UIColor.gray
        footTextLabel.textAlignment = .center
        footTextLabel.text = "更多信息"
        view.addSubview(footTextLabel)
        
        return view
    }
    //获取行业
    func tradeList(parent_id:String,btnActions:@escaping (UIAlertAction,String)->()){
        
        //parent_id 0 是一级   查对应一一级的子集  传对应一级的id
        let params:Dictionary = ["parent_id":parent_id,"token":UserModel.getUserModel().token]
        PublicMethod.showProgress()
        LoginRequest.getPost(methodName: TRADE_LIST, params: params, hadToast: true, fail: { (dic) in
            
        }) { (dic) in
            PublicMethod.dismiss()
            DLog(dic)
            if dic["data"] is Array<Dictionary<String,String>>{
                var btnDic = Dictionary<String,String>()
                for oneDic in dic["data"] as! Array<Dictionary<String,String>>{
                    btnDic[oneDic["index_id"]!] = oneDic["name"]
                }
                btnDic[kCancel] = "取消"
                let alertCont = UIAlertController.init(title: "一级行业", message: nil, preferredStyle: UIAlertControllerStyle.alert, btns: btnDic, btnActions: btnActions)
                self.present(alertCont, animated: true, completion: nil)
            }
        }
        
    }
    
    //MARK - 选人cell
    //没有做过检查
    func configNoCheckCell(indexPath: IndexPath,tableView: UITableView)->(UITableViewCell){
        let cellIde = "cell"
        var cell:ProSituationMemberCell? = tableView.dequeueReusableCell(withIdentifier: cellIde) as? ProSituationMemberCell
        
        if cell == nil {
            cell = ProSituationMemberCell.init(style: .default, reuseIdentifier: cellIde)
        }
        self.disposeMembersCell(cell: cell!, indexPath: indexPath)
        return cell!
    }
    //处理参与者，观察员cell
    func disposeMembersCell(cell:ProSituationMemberCell,indexPath: IndexPath){
        cell.projectId = ""
        cell.type = memberStyle(rawValue: indexPath.row)
        cell.nameLable.text = self.vModel.membersTitles[indexPath.row]
        cell.isDelete = self.vModel.membersIsdelete[indexPath.row]
        cell.configAlReady(array:self.vModel.membersArray[indexPath.row])
        cell.click = {[weak self,weak cell] (str) in
            
            if cell?.nameLable.text == "联系人"{
                let addC = AddOtherContactVC()
                addC.currentCustomerId = (self?.selectedContactId)!
                addC.getResult = {[weak self]list in
                    self?.selectContactArr = list
                    var result = Array<MemberModel>()
                    for dic in list{
                        result.append(MemberModel.configWithDic(dic: ["id":dic["id"],"realname":dic["name"],"head":""]))
                    }
                    if result.count > 0{
                        
                        let arr = result.map({ (model) -> String in
                            return model.id!
                        })
                        let idStr = (arr + cell!.resultIds()).joined(separator: ",") as String
                        //先走网络，添加完成在做本地UI更新
                        //                        self?.addMember(type: (cell?.type!)!, projectId: (self?.model?.id!)!, resultIdStr: idStr, result: {
                        self?.vModel.membersArray[indexPath.row] = result
                        cell?.configAlReady(array:result)
                        let height = cell?.refreshHeight()
                        DLog("height:"+String(describing: height))
                        if self?.vModel.membersHeight[indexPath.row] != height {
                            self?.vModel.membersHeight[indexPath.row] = height!
                            DLog("height:["+String(describing: indexPath.row)+"]"+String(describing: self?.vModel.membersHeight[indexPath.row]))
                            self?.tableView.reloadData()
                        }
                    }
                }
                addC.selectArr = (self?.selectContactArr)!
                self?.navigationController?.pushViewController(addC, animated: true)
                return
            }
            
            if str == "+" {
                let vcTitleArray = ["选择参与人","选择观察员","选择联系人"]
                self?.vModel.membersIsdelete[indexPath.row] = false
                cell?.collectionView.reloadData()
                let vc = TutoringMembersVC()
                vc.title = vcTitleArray[indexPath.row]
                if indexPath.row == 0{
                    vc.qf_otherArray.removeAll()
                    for qf_model in (self?.vModel.membersArray[1])!{
                        vc.qf_otherArray.append(qf_model)
                    }
                }else if indexPath.row == 1{
                    vc.qf_otherArray.removeAll()
                    for qf_model in (self?.vModel.membersArray[0])!{
                        vc.qf_otherArray.append(qf_model)
                    }
                }
                vc.userId = (self?.userid)!
                vc.type = .multiple
                vc.configAlReadyArray(alReady: (cell?.currentMember())!)
                vc.resultArray = {[weak self,weak cell](result) in
                    DLog(result)
                    if result.count > 0{
                        
                        let arr = result.map({ (model) -> String in
                            return model.id!
                        })
                        let idStr = (arr + cell!.resultIds()).joined(separator: ",") as String
                        //先走网络，添加完成在做本地UI更新
                        //                        self?.addMember(type: (cell?.type!)!, projectId: (self?.model?.id!)!, resultIdStr: idStr, result: {
                        self?.vModel.membersArray[indexPath.row] = result
                        cell?.configAlReady(array:result)
                        let height = cell?.refreshHeight()
                        DLog("height:"+String(describing: height))
                        if self?.vModel.membersHeight[indexPath.row] != height {
                            self?.vModel.membersHeight[indexPath.row] = height!
                            DLog("height:["+String(describing: indexPath.row)+"]"+String(describing: self?.vModel.membersHeight[indexPath.row]))
                            self?.tableView.reloadData()
                        }
                    }
                }
                self?.navigationController?.pushViewController(vc, animated: true)
            }else if str == "-"{
                
                //TODO比较乱 临时改动   有时间做整理
                if self?.vModel.membersIsdelete[indexPath.row] == true{
                    if (cell?.dataArray.count)! > 1 {
//                        self?.addMember(type: (cell?.type!)!, projectId: (self?.model?.id!)!, resultIdStr: (cell?.resultIdStr())!, result: {
                            self?.vModel.membersIsdelete[indexPath.row] = !(self?.vModel.membersIsdelete[indexPath.row])!
                            cell?.isDelete = (self?.vModel.membersIsdelete[indexPath.row])!
                            cell?.collectionView.reloadData()
//                        })
                    }else{
                        self?.vModel.membersIsdelete[indexPath.row] = !(self?.vModel.membersIsdelete[indexPath.row])!
                        cell?.isDelete = (self?.vModel.membersIsdelete[indexPath.row])!
                        cell?.collectionView.reloadData()
                    }
                    
                    
                }else{
                    self?.vModel.membersIsdelete[indexPath.row] = !(self?.vModel.membersIsdelete[indexPath.row])!
                    cell?.isDelete = (self?.vModel.membersIsdelete[indexPath.row])!
                    cell?.collectionView.reloadData()
                }
                
                
                
            }else{
                self?.vModel.membersArray[indexPath.row] = (cell?.currentMember())!
                let height = cell?.refreshHeight()
                if self?.vModel.membersHeight[indexPath.row] != height {
                    self?.vModel.membersHeight[indexPath.row] = height!
//                    self?.table.beginUpdates()
//                    self?.table.endUpdates()
                }
                
            }
        }
    }
    
    /**
     *  产品回调处理
     *
     *  @param array
     */
    func productCallBackWithArray(array:Array<Product_lineModel>) {
        var resultStr = String()
        var resultIDArray = Array<Dictionary<String,String>>()
        var sum = 0.0
        var i = 0
        for model in array{
            if model.amount == nil || model.amount == ""{
                model.amount = "0.0"
            }
            var dic = Dictionary<String,String>()
            dic["id"] = model.id
            dic["amount"] = model.amount
            dic["products"] = model.name
            if array.count == 1{
                sum = sum + NSString.init(string: model.amount!).doubleValue
                let modelStr = model.name!+"("+model.amount!+")"
                resultStr.append(modelStr)
            }else{
                sum = sum + NSString.init(string: model.amount!).doubleValue
                let modelStr = model.name!+"("+model.amount!+")"
                resultStr.append(modelStr)
                if i<array.count-1{resultStr.append(",")}
            }
            resultIDArray.append(dic)
            i = i+1
        }
        productArray.removeAll()
        productArray = resultIDArray
        productStr = resultStr
        self.datasourceArr[0][6].updateValue(String(sum), forKey: (self.datasourceArr[0][6].keys.first)!)
        self.datasourceArr[0][5].updateValue(String(resultStr), forKey: (self.datasourceArr[0][5].keys.first)!)
        tableView.reloadData()
    }
}
