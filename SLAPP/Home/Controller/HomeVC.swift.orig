//
//  HomeVC.swift
//  SLAPP
//
//  Created by 柴进 on 2018/1/31.
//  Copyright © 2018年 柴进. All rights reserved.
//

import UIKit
import AVFoundation
import LameTool
import MJRefresh
import WZLBadge
import SwiftyJSON
class HomeVC: UIViewController,UIScrollViewDelegate,UITableViewDelegate,UITableViewDataSource {
    
    
    
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return UITableViewCell.init()
    }
    
    let viewMargin : CGFloat = 20
    var backView = UIScrollView.init()
    
    var height_Head = MAIN_SCREEN_WIDTH / 1242 * 853 - 64
    var vipView_Height : CGFloat = 50
    var completionLable = UILabel()//绩效完成率数字
    var forecastLable = UILabel()//低于本行业%
    var noDataView = UIImageView()//无数据界面
    var noDataLable = UILabel()//无数据文字
    
    var typeDataArr : Array<Any>?//一级数据
    var detailDataArr : Array<Any>?//二级数据
    var commissionView : CommissionView! //待办视图
    var myReminderView:ReminderView!
    var messageBtn = UIButton()
    var vipDetail:Array<Any>?{ // 首页会员信息
        didSet{
//            DLog(vipDetail)
//            let vipDetailView = VipDetailView.init(frame: CGRect(x: 0, y: height_Head, width: MAIN_SCREEN_WIDTH, height: vipView_Height))
//            backView.addSubview(vipDetailView)
            vipView_Height = 0
        }
    }
    var commission = Array<Dictionary<String,Any>>()//首页展示信息 代办的事情（辅导） 第一版
    {
        didSet{
            
            if commissionView != nil  {
                commissionView.removeFromSuperview()
                commissionView = nil
            }
            
            if commissionView == nil {
                commissionView = CommissionView.init(frame: CGRect(x: 0, y: height_Head + vipView_Height + viewMargin, width: MAIN_SCREEN_WIDTH, height: 200))
                 backView.addSubview(commissionView)
            }
            commissionView.frame = CGRect(x: 0, y: height_Head + vipView_Height + viewMargin, width: MAIN_SCREEN_WIDTH, height: 200)
            
            commissionView.modelArr = commission
            
//            PublicMethod.showProgress()
//            LoginRequest.getPost(methodName: COMMISSION_MORE, params: ["token":UserModel.getUserModel().token], hadToast: true, fail: {[weak self] (dic) in
//                PublicMethod.dismissWithError()
//                self?.backView.mj_header.endRefreshing()
//                }, success: { (dic) in
//                    DLog(dic)
////                    if dic["data"] is Array<Dictionary<String,Any>>{
////                        self.commission = dic["data"] as! Array<Dictionary<String,Any>>
////                    }else{
////                        self.commission = Array<Dictionary<String,Any>>()
////                    }
//            })

            
            if commission.count == 0 {
                commissionView.isHidden = true
            }else{
                commissionView.isHidden = false
                noDataLable.isHidden = true
                noDataView.isHidden = true
            }
            
            commissionView.tableView.layoutIfNeeded()
             commissionView.tableView.frame = CGRect(x: 0, y: CommissionView_HeaderHeight, width: commissionView.frame.size.width, height: commissionView.tableView.contentSize.height)
            
            commissionView.frame = CGRect(x: 0, y: height_Head + vipView_Height + viewMargin, width: MAIN_SCREEN_WIDTH, height: commissionView.tableView.contentSize.height + CommissionView_HeaderHeight)
           

           
        }
    }
    
    // MARK: - 首页展示信息绩效完成率
    var completion_rate = Dictionary<String,Any>()//首页展示信息绩效完成率 第一版
    {
        didSet{
            completionLable.text  = String.init(format: "%d",JSON(completion_rate["completion_rate"]).intValue)+"%"
            let str = String.init(format: "%d",JSON(completion_rate["is_forecast"]).intValue).appending("%")
            forecastLable.attributedText = String.htmlStr(htmlStr: JSON(completion_rate["name_new"]).stringValue)
        }
    }
    var intellisense = Array<(String,Array<(String,String)>,String)>()//首页展示信息 智能提示 第一版
    {
        didSet{
            //智能提示View
            
            if myReminderView != nil {
                myReminderView.removeFromSuperview()
                myReminderView = nil
            }
            
            if myReminderView == nil{
                 let reminderView = ReminderView.init(frame: self.view.frame)
                 backView.addSubview(reminderView)
                myReminderView = reminderView
            }
            
           
            myReminderView.modelArr = intellisense
            myReminderView.tableView.reloadData()
            var height = CGFloat(0)
            for i in 0 ..< myReminderView.modelArr.count {
                height = height + (myReminderView.tableView.delegate?.tableView!(myReminderView.tableView, heightForRowAt: IndexPath(row: i, section: 0)))!
            }
            if myReminderView.modelArr.count == 0 {
                myReminderView.isHidden = true
            }else{
                myReminderView.isHidden = false
                noDataLable.isHidden = true
                noDataView.isHidden = true
            }
            var y = height_Head + vipView_Height + viewMargin + commissionView.tableView.contentSize.height + CommissionView_HeaderHeight + viewMargin
            if commission.count == 0 {
                y = height_Head + vipView_Height + viewMargin
            }
<<<<<<< HEAD
            myReminderView.tableView.frame = CGRect.init(x: 0, y: CommissionView_HeaderHeight, width: myReminderView.frame.size.width, height: myReminderView.frame.size.height - CommissionView_HeaderHeight)
            myReminderView.frame = CGRect(x: 0, y: y, width: MAIN_SCREEN_WIDTH, height: height + CommissionView_HeaderHeight)
            
            myReminderView.tableView.isScrollEnabled = false
           
=======
            
            reminderView.tableView.frame = CGRect.init(x: 0, y: CommissionView_HeaderHeight, width: reminderView.frame.size.width, height: reminderView.frame.size.height - CommissionView_HeaderHeight)
            
            reminderView.frame = CGRect(x: 0, y: y, width: MAIN_SCREEN_WIDTH, height: height + CommissionView_HeaderHeight)
            
            reminderView.tableView.isScrollEnabled = false
            backView.addSubview(reminderView)
>>>>>>> dddd
            backView.contentSize = CGSize(width: MAIN_SCREEN_WIDTH, height: height + CommissionView_HeaderHeight + height_Head + vipView_Height +  commissionView.tableView.contentSize.height + CommissionView_HeaderHeight + viewMargin * 3)
        }
    }

    override func viewDidLoad() {
        super.viewDidLoad()

//        self.vipDetail = []
        vipView_Height = 0
        configUI()
        
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.messageBtn.showBadge(with: .number, value: Int(RCIMClient.shared().getTotalUnreadCount()), animationType: .none)
    }
    
    func configUI() {
        
        backView.backgroundColor = kNavBarBGColor_Black
        
        let searchBtn = UIButton(type: .custom)
        searchBtn.frame = CGRect(x: 0, y: 0, width: MAIN_SCREEN_WIDTH, height: (MAIN_SCREEN_WIDTH) / 1180.0 * 163.0)
        searchBtn.setImage(UIImage(named: "searchBtn"), for: .normal)
        searchBtn.imageView?.contentMode = UIViewContentMode.scaleAspectFit
        self.navigationItem.titleView = searchBtn
        searchBtn.addTarget(self, action: #selector(gotoSearch(sender:)), for: UIControlEvents.touchUpInside)
        
        backView.frame = CGRect(x: 0, y:0, width: MAIN_SCREEN_WIDTH, height: MAIN_SCREEN_HEIGHT - TAB_HEIGHT)
        self.view.addSubview(backView)
        backView.backgroundColor = UIColor.groupTableViewBackground
        backView.delegate = self
        
        backView.addSubview(makeHead())
        
        let header:MJRefreshNormalHeader = MJRefreshNormalHeader.init(refreshingBlock: {[weak self] in
            self?.configData()
        })
        
        backView.mj_header = header
        header.superview?.bringSubview(toFront: header)
        header.stateLabel.textColor = UIColor.white
        header.lastUpdatedTimeLabel.textColor = UIColor.white
        header.activityIndicatorViewStyle = .white
        header.backgroundColor = UIColor.clear
        
        noDataView = UIImageView.init(frame: CGRect(x: 0, y: height_Head + vipView_Height + viewMargin, width: MAIN_SCREEN_WIDTH/3*2, height: MAIN_SCREEN_WIDTH/3*2/1000*700))
        backView.addSubview(noDataView)
        noDataView.image = UIImage.init(named: "noData")
        noDataView.centerX = backView.centerX
        
        noDataLable = UILabel.init(frame: CGRect(x: 0, y: height_Head + vipView_Height + viewMargin + MAIN_SCREEN_WIDTH/3*2/1000*700, width: MAIN_SCREEN_WIDTH, height: 20))
        noDataLable.textAlignment = .center
        noDataLable.font = kFont_Small
        noDataLable.text = "暂时无待办事项及提醒信息"
        backView.addSubview(noDataLable)
        
        
        self.configData()
        
    }

    func configData(){
        
        PublicMethod.showProgress()
        LoginRequest.getPost(methodName: INDEX2_COMMISSION, params: ["token":UserModel.getUserModel().token], hadToast: true, fail: {[weak self] (dic) in
            PublicMethod.dismissWithError()
            self?.backView.mj_header.endRefreshing()
        }, success: { (dic) in
            if dic["data"] is Array<Dictionary<String,Any>>{
                DLog(dic)
                
                if JSON(dic["data"]).count > 0 {
                    let topDic = JSON(dic["data"] as Any).arrayValue.first!
                    let dateStr = topDic["date"].stringValue
                 
                    var resultArray:Array<Dictionary<String,Any>> = Array()
                    var subArray = topDic["list"].arrayObject
                    for subDic in subArray! {
                        var subNewDic = Dictionary<String,Any>()
                        for (key,value) in JSON(subDic).dictionaryObject!{
                            DLog(key)
                            DLog(value)
                            subNewDic[key] = value
                        }
                        subNewDic["date"] = dateStr
                        resultArray.append(subNewDic)
                    }
                     self.commission = resultArray
                }else{
                    self.commission = Array<Dictionary<String,Any>>()
                }
//
                
                
                
                
                
//                self.commission = dic["data"] as! Array<Dictionary<String,Any>>
            }else{
                self.commission = Array<Dictionary<String,Any>>()
            }
            LoginRequest.getPost(methodName: INDEX1_INTELLISENSE, params: ["token":UserModel.getUserModel().token], hadToast: true, fail: {[weak self] (dic) in
                PublicMethod.dismissWithError()
                self?.backView.mj_header.endRefreshing()
                DLog(dic)
            }, success: { [weak self](dic) in
                PublicMethod.dismiss()
                self?.backView.mj_header.endRefreshing()
                if dic["data"] is Array<Dictionary<String,Any>>{
                    var modelArr = Array<(String,Array<(String,String)>,String)>()
                    for oneData in dic["data"] as! Array<Dictionary<String,Any>> {
                        var proList = Array<(String,String)>()
                        for onePro in oneData["data"] as! Array<Dictionary<String,Any>> {
                            proList.append((onePro["id"] is NSNumber ? String(describing: onePro["id"] as! NSNumber) : onePro["id"] as! String ,onePro["name"] as! String))
                        }
                        modelArr.append((oneData["name"] as! String, proList,String.noNilStr(str: oneData["id"])))
                    }
                    
                    self?.intellisense = modelArr
                }else{
                    self?.intellisense = Array<(String,Array<(String,String)>,String)>()
                }
                
            })
        })
        LoginRequest.getPost(methodName: INDEX1_COMPLETION_RATE, params: ["token":UserModel.getUserModel().token], hadToast: true, fail: { (dic) in
            DLog(dic)
        }, success: { (dic) in
            self.completion_rate = dic
        })
        
    }
    
    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func makeHead() -> UIView {
        

        
        let topView = UIImageView.init(image: UIImage.init(named: "firstHead"))
        //        1242 × 853
        topView.frame = CGRect(x: 0, y: -64, width: MAIN_SCREEN_WIDTH, height: MAIN_SCREEN_WIDTH / 1242 * 853)
        topView.isUserInteractionEnabled = true
//        cell.addSubview(topView)
        
        let btn1 = UIButton.init(type: .custom)
        btn1.frame = CGRect(x: 0, y: 84, width: MAIN_SCREEN_WIDTH/4, height: 60)
        //        btn1.backgroundColor = .red
        btn1.imageView?.contentMode = .scaleAspectFit
        btn1.setImage(UIImage.init(named: "fRecording"), for: .normal)
        topView.addSubview(btn1)
        btn1.isUserInteractionEnabled = true
        btn1.addTarget(self, action: #selector(startRecord(sender:)), for: UIControlEvents.touchUpInside)
        
        let btn2 = UIButton.init(type: .custom)
        btn2.frame = CGRect(x: MAIN_SCREEN_WIDTH/4, y: 84, width: MAIN_SCREEN_WIDTH/4, height: 60)
        //        btn1.backgroundColor = .red
        btn2.imageView?.contentMode = .scaleAspectFit
        btn2.setImage(UIImage.init(named: "fMessage"), for: .normal)
        topView.addSubview(btn2)
        btn2.addTarget(self, action: #selector(gotoNil(sender:)), for: UIControlEvents.touchUpInside)
        btn2.badgeCenterOffset = CGPoint.init(x: -34, y: 0)
        btn2.showBadge(with: .number, value: Int(RCIMClient.shared().getTotalUnreadCount()), animationType: .none)
        messageBtn = btn2
        NotificationCenter.default.addObserver(forName: NSNotification.Name(rawValue: "changeGroupRedCount"), object: nil, queue: nil) { (notif) in
            DispatchQueue.main.async(execute: {
                self.messageBtn.showBadge(with: .number, value: Int(RCIMClient.shared().getTotalUnreadCount()), animationType: .none)
                if PublicMethod.appRootViewController() is TabBarController{
                    let tabbar = PublicMethod.appRootViewController() as! TabBarController
                    (tabbar.tabBar.items![3] as! UITabBarItem).showBadge(with: .number, value: Int(RCIMClient.shared().getTotalUnreadCount()), animationType: .none)
                }
            })
            
        }
        
        let tabbar = sharePublicDataSingle.publicTabbar
        (tabbar?.tabBar.items![3] as! UITabBarItem).showBadge(with: .number, value: Int(RCIMClient.shared().getTotalUnreadCount()), animationType: .none)
        
        let btn3 = UIButton.init(type: .custom)
        btn3.frame = CGRect(x: MAIN_SCREEN_WIDTH/4*2, y: 84, width: MAIN_SCREEN_WIDTH/4, height: 60)
        //        btn1.backgroundColor = .red
        btn3.imageView?.contentMode = .scaleAspectFit
        btn3.setImage(UIImage.init(named: "fContacts"), for: .normal)
        topView.addSubview(btn3)
        btn3.addTarget(self, action: #selector(gotoCustomer(sender:)), for: UIControlEvents.touchUpInside)
        let btn4 = UIButton.init(type: .custom)
        btn4.frame = CGRect(x: MAIN_SCREEN_WIDTH/4*3, y: 84, width: MAIN_SCREEN_WIDTH/4, height: 60)
        //        btn1.backgroundColor = .red
        btn4.imageView?.contentMode = .scaleAspectFit
        btn4.setImage(UIImage.init(named: "fAdded"), for: .normal)
        topView.addSubview(btn4)
        btn4.addTarget(self, action: #selector(gotoNew(sender:)), for: UIControlEvents.touchUpInside)
        
        let lab1 = UILabel.init(frame: CGRect(x: 20, y: MAIN_SCREEN_WIDTH / 1242 * 645, width: 135, height: 15))
        lab1.font =  UIFont.systemFont(ofSize: 15)
        lab1.text = "业绩完成率:"
        lab1.textColor = .white
        topView.addSubview(lab1)
        
        completionLable = UILabel.init(frame: CGRect(x: 20 + 80, y: MAIN_SCREEN_WIDTH / 1242 * 630 , width: 135, height: 25))
        completionLable.font =  UIFont.systemFont(ofSize: 24)

        completionLable.textColor = .black
        topView.addSubview(completionLable)
        
        
        
        
        
        let otherBtn = UIButton.init(type: .custom)
        topView.addSubview(otherBtn)
        otherBtn.titleLabel?.font = UIFont.systemFont(ofSize: 14)
        otherBtn.setTitleColor(UIColor.orange, for: .normal)
        otherBtn.setTitle("查看业绩排行榜", for: .normal)
        otherBtn.snp.makeConstraints {[weak topView,weak lab1] (make) in
            make.width.equalTo(100)
            make.height.equalTo(30)
            make.right.equalTo(topView!).offset(-10)
            make.centerY.equalTo(lab1!.snp.centerY).offset(20)
        }
        otherBtn.addTarget(self, action: #selector(otherBtnClick), for: .touchUpInside)
        
        topView.addSubview(forecastLable)
        forecastLable.font = UIFont.systemFont(ofSize: 13)
        forecastLable.snp.makeConstraints {[weak lab1,weak topView] (make) in
            make.centerY.equalTo(lab1!.snp.centerY).offset(-10)
            make.width.equalTo(160)
            make.height.equalTo(30)
            make.right.equalTo(topView!).offset(-10)
        }
        
        return topView
    }
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    @objc func otherBtnClick(){
        
        self.navigationController?.pushViewController(ToViewOtherPerformanceVC(), animated: true)
    }

    /*
    // MARK: - Navigation

    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }
    */
    //MARK: - ---------------------联系人----------------------
    @objc func gotoCustomer(sender:UIButton){
        self.navigationController?.pushViewController(CustomerVC(), animated: true)
    }
    
    @objc func gotoNil(sender:UIButton){
//        let groupListVc = PrivateListViewController()
//        self.navigationController?.pushViewController(groupListVc, animated: true)
        let groupListVc = PrivateListViewController()
        self.navigationController?.pushViewController(groupListVc, animated: true)
    }
    //MARK: - ---------------------搜索----------------------
    @objc func gotoSearch(sender:UIButton){
        self.navigationController?.pushViewController(SearchViewController(), animated: true)
    }
    
    //MARK: - ---------------------新建----------------------
    @objc func gotoNew(sender:UIButton){
        let vc:PublishViewController = PublishViewController()
        vc.click = { [weak self](tag) in
            switch tag {
            
            case 0:
                self?.addFD()
                
                break
            case 1:
//                ((sharePublicDataSingle.publicTabbar?.childViewControllers[1] as! BaseNavigationController).childViewControllers.first as! SLViewController).webView.loadRequest(URLRequest(url: URL(string: h5_host + "main.html#/addProject/app")!))
//                sharePublicDataSingle.publicTabbar?.selectedWithIndex(index: 1)
                
                self?.navigationController?.pushViewController(NewProjectViewController(), animated: true)
                break
                
            case 2:
            
                self?.navigationController?.pushViewController(AddCustomerVC(), animated: true)
                
            
                break
            case 3:
                self?.navigationController?.pushViewController(AddContactVC(), animated: true)
                break
            default:
                break
            }
        }
        UIApplication.shared.keyWindow?.rootViewController?.present(vc, animated: true, completion: nil)

    }

     func addFD(){
        self.isHasTime()
//                        PublicMethod.showProgress()
//                        LoginRequest.getPost(methodName: CONSULT_PRO_LIST, params: [kToken:UserModel.getUserModel().token], hadToast: true, fail: { (dic) in
//
//                        }) { (dic) in
//                            PublicMethod.dismiss()
//                            DLog(dic)
//                            if dic["data"] is Array<Dictionary<String,String>>{
//                                var btnDic = Dictionary<String,String>()
//                                for oneDic in dic["data"] as! Array<Dictionary<String,String>>{
//                                    btnDic[oneDic["project_id"]!] = oneDic["pro_name"]
//                                }
//                                btnDic[kCancel] = "取消"
//                                let alertCont = UIAlertController.init(title: "选择项目", message: nil, preferredStyle: UIAlertControllerStyle.alert, btns: btnDic, btnActions: {action,key in
//                                    DLog(key)
//                                    let urlStr = h5_host + "main.html#/pro/appointment/"
//                                    let urlEnd = key + "/"
//                                        + "0" + "/"
//                                        + "0" + "/"
//                                        + action.title!
//                                    let url = URL.init(string: urlStr + urlEnd.addingPercentEncoding(withAllowedCharacters: CharacterSet.urlQueryAllowed)!)
//
//                                    DLog(1)
                                    //TODO
//                                    let viewC2 = SLViewController.init()
//                                    viewC2.setCookie()
//                                    viewC2.webView.loadRequest(URLRequest.init(url:url!))
//
//                                    viewC2.func_cancelModify = {
//                                        self.navigationController?.isNavigationBarHidden = false
//                                        self.navigationController?.popToRootViewController(animated: false)
//                                    }
//                                    viewC2.func_createSuccess = {consultId in
//                                        //            PublicMethod.dismissWithSuccess(str: "修改已提交")
//                                        //详情
//                                        let vc = TutoringDetailVC()
//                                        vc.new_consult_id = consultId
//                                        (sharePublicDataSingle.publicTabbar?.childViewControllers[2] as! BaseNavigationController).pushViewController(vc, animated: false)
//                                    }
//                                    self.navigationController?.pushViewController(viewC2, animated: true)
//
        
//                                })
//                                self.present(alertCont, animated: true, completion: nil)
//                            }
//                        }
                    }
            


        
    //MARK: - ---------------------录音----------------------
    /// 文件保存地址
    var recordFilePatch = NSSearchPathForDirectoriesInDomains(FileManager.SearchPathDirectory.documentDirectory, FileManager.SearchPathDomainMask.userDomainMask, true).last! + "/RRecord.mav"
    var recordMp3FilePatch = ""
    /// 录音最大时间
    let maxRecordTime = 60
    
    /// 录音实体
    var recorder:AVAudioRecorder? = nil
    
    var player: AVAudioPlayer?
    
    var recordView:RecordView? = nil
    
    var saveRecordView : SaveRecordView? = nil
    //点击完成
    fileprivate func clickFirstMenu(_ btn: UIButton , saveRecordView:SaveRecordView) {
        PublicMethod.showProgress()
        LoginRequest.getPost(methodName: RECORDING_SECOND_SELECT, params: ["type":(self.typeDataArr![btn.tag] as AnyObject).value(forKeyPath: "id") as Any ,"token":UserModel.getUserModel().token as Any], hadToast: true, fail: { (dic) in
            PublicMethod.dismissWithError()
        }) { (dic) in
            PublicMethod.dismiss()
            if dic["data"] is Array<Any>{
                self.detailDataArr = dic["data"] as? Array<Any>
                if self.detailDataArr?.count == 0 {
                    let alert = UIAlertController.init(title: "已经没有下级菜单，是否直接保存", message: nil, preferredStyle: UIAlertControllerStyle.alert, okAndCancel: ("保存", "取消"), btnActions: { (action, key) in
                        if key == "ok" {
                            self.stopRecord()
                            self.sendData(type: (self.typeDataArr![btn.tag] as AnyObject).value(forKeyPath: "id") as Any, id: "0", name: (self.typeDataArr![btn.tag] as AnyObject).value(forKeyPath: "name") as Any, filePath: self.recordMp3FilePatch, duration: self.recDuration)
                        }
                    })
                    self.detailDataArr = nil
                    self.present(alert, animated: true, completion: nil)
                    return
                }
                self.recType = (self.typeDataArr![btn.tag] as AnyObject).value(forKeyPath: "id") is NSNumber ? String(describing: (self.typeDataArr![btn.tag] as AnyObject).value(forKeyPath: "id") as! NSNumber) : (self.typeDataArr![btn.tag] as AnyObject).value(forKeyPath: "id") as! String
                var nameArr : Array<String> = Array.init()
                for i in 0..<(dic["data"] as! Array<Any>).count{
                    
                    nameArr.append(((dic["data"] as! Array<Any>)[i] as AnyObject).value(forKeyPath: "name") as! String)
                }
                saveRecordView.scrollTodetailView(detailArr: nameArr)
            }else{
                self.detailDataArr = nil
                self.stopRecord()
                self.sendData(type: (self.typeDataArr![btn.tag] as AnyObject).value(forKeyPath: "id") as Any, id: "0", name: (self.typeDataArr![btn.tag] as AnyObject).value(forKeyPath: "name") as Any, filePath: self.recordMp3FilePatch, duration: self.recDuration)
            }
        }
    }
    var timer:Timer? = nil
    var recType = ""
    var recParallelism_id = ""
    var recParallelism_name = ""
    var recDuration = "0"
   
    
    fileprivate func clickFinish() {
        if (self.recorder?.isRecording)! {
            self.pauseRecord()
            PublicMethod.showProgressWithStr(statusStr: "正在获取菜单")
            LoginRequest.getPost(methodName: RECORDING_FIRST_SELECT, params: ["token":UserModel.getUserModel().token as Any], hadToast: true, fail: { (dic) in
                PublicMethod.dismiss()
            }) { (dic) in
                if dic["data"] is Array<Any>{
                    self.typeDataArr = dic["data"] as? Array<Any>
                    var nameArr : Array<String> = Array.init()
                    for i in 0..<(dic["data"] as! Array<Any>).count{
                        nameArr.append(((dic["data"] as! Array<Any>)[i] as AnyObject).value(forKeyPath: "name") as! String)
                    }
                    self.saveRecordView = SaveRecordView.init(modelArr: nameArr, frame : CGRect(x: 0, y: 0, width: self.view.width, height: self.view.height))
                    self.saveRecordView?.moduleBtnClickBlock = ({ (btn) in
                        self.clickFirstMenu(btn,saveRecordView: self.saveRecordView!)
                    })
                    self.saveRecordView?.saveBtnClickBlock = ({ [weak self](moduleIndex,detailIndex) in
                        let id = self?.detailDataArr == nil ? "" : (self?.detailDataArr![detailIndex!] as AnyObject).value(forKeyPath: "id") as Any
                        let name = self?.detailDataArr == nil ? (self!.typeDataArr![moduleIndex!] as AnyObject).value(forKeyPath: "name") as Any : (self?.detailDataArr![detailIndex!] as AnyObject).value(forKeyPath: "name") as Any
                       self?.stopRecord()
                            
                            self?.sendData(type: self?.recType, id: id, name: name, filePath: (self?.recordMp3FilePatch)!, duration: (self?.recDuration)!)
                        
                    })
                    
                    self.saveRecordView?.cancleBtnClickBlock = {btn in
                        self.stopRecord()
                        self.recordView?.removeFromSuperview()
                        self.saveRecordView?.removeFromSuperview()
                        self.recordView = nil
                    }
                    
                    self.view.addSubview(self.saveRecordView!)
                    self.view.bringSubview(toFront: self.recordView!)
                }
                PublicMethod.dismiss()
                DLog(dic)
            }
            recordView?.controlBtn.backgroundColor = .black
            recordView?.controlBtn.setTitleColor(.white, for: UIControlState.normal)
            recordView?.progressView.waveColor = .black
            recordView?.timeLable.textColor = .black
            recordView?.backgroundColor = .white

        }else{
            self.recorder?.record()
            timer?.fireDate = Date.distantPast
            self.saveRecordView?.removeFromSuperview()
            self.saveRecordView = nil
            
            recordView?.controlBtn.backgroundColor = .white
            recordView?.controlBtn.setTitleColor(.red, for: UIControlState.normal)
            recordView?.progressView.waveColor = .white
            recordView?.timeLable.textColor = .white
            recordView?.backgroundColor = .orange
        }
    }
    
    func normalizedPowerLevelFromDecibels(decibels:Float) -> Float {
        if decibels < -60 || decibels == 0 {
            return 0
        }
        return powf((powf(10.0, 0.05 * decibels) - powf(10, 0.05 * -60.0)) * (10.0 / (1.0 - powf(10.0, 0.05 * -60.0))), 1.0 / 4.0)
    }
    
    @objc func updateMeters() {

        if recorder == nil {
            return
        }
        recorder?.updateMeters()
        let normalizedValue = self.normalizedPowerLevelFromDecibels(decibels: (recorder?.averagePower(forChannel: 0))!)
        recordView?.progressView.update(withLevel: CGFloat(normalizedValue))
    }
    
    /// 开始录音方法
    ///
    /// - Parameter sender: 按钮
    @objc func startRecord(sender:UIButton){
        if recordView != nil{return}
            recDuration = "0"
        timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true, block: { (ti) in
            self.recDuration = String(Int(self.recDuration)! + 1)
            let first = (String(Int(self.recDuration)!/60).count > 1) ? String(Int(self.recDuration)!/60) : ("0" + String(Int(self.recDuration)!/60))
            let second = (String(Int(self.recDuration)!%60).count > 1) ? String(Int(self.recDuration)!%60) : ("0" + String(Int(self.recDuration)!%60))
            self.recordView?.timeLable.text = first + ":" + second
        })
        recordView = RecordView.init(frame: CGRect.init(x: 15, y: MAIN_SCREEN_HEIGHT - TAB_HEIGHT - 70 - NAV_HEIGHT, width: MAIN_SCREEN_WIDTH - 30, height: 60))
        var displaylink = CADisplayLink.init(target: self, selector: #selector(updateMeters))
        displaylink.add(to: RunLoop.current, forMode: RunLoopMode.commonModes)
        self.view.addSubview(recordView!)
        
        recordView?.controlBtnClickBlock = ({ (btn) in
            self.clickFinish()
        })
        let session = AVAudioSession.sharedInstance()
        //设置session类型
        do {
            try session.setCategory(AVAudioSessionCategoryPlayAndRecord)
        } catch let err{
            DLog("设置类型失败:\(err.localizedDescription)")
        }
        //设置session动作
        do {
            try session.setActive(true)
        } catch let err {
            DLog("初始化动作失败:\(err.localizedDescription)")
        }
        //录音设置，注意，后面需要转换成NSNumber，如果不转换，你会发现，无法录制音频文件，我猜测是因为底层还是用OC写的原因
        let recordSetting: [String: Any] = [AVSampleRateKey: NSNumber(value: 32000),//采样率
            AVFormatIDKey: NSNumber(value: kAudioFormatLinearPCM),//音频格式
            AVLinearPCMBitDepthKey: NSNumber(value: 16),//采样位数
            AVNumberOfChannelsKey: NSNumber(value: 1),//通道数
            AVEncoderAudioQualityKey: NSNumber(value: AVAudioQuality.min.rawValue)//录音质量
        ];
        //开始录音
        do {
            let url = URL(fileURLWithPath: recordFilePatch)
            recorder = try AVAudioRecorder(url: url, settings: recordSetting)
            recorder!.prepareToRecord()
            recorder?.isMeteringEnabled = true
            recorder!.record()
            DLog("开始录音")
        } catch let err {
            DLog("录音失败:\(err.localizedDescription)")
        }
    }
    
    /// 暂停录音
    @objc func pauseRecord(){
        recorder?.pause()
        timer?.fireDate = Date.distantFuture
    }
    /// 停止录音
    @objc func stopRecord() {
        timer?.invalidate()
        timer = nil
        if let recorder = self.recorder {
            if recorder.isRecording {
                DLog("正在录音，马上结束它，文件保存到了：\(recordFilePatch)")
            }else {
                DLog("没有录音，但是依然结束它")
            }
            recorder.stop()
            self.recorder = nil
        }else {
            DLog("没有初始化")
        }
        recordMp3FilePatch = LameTool.audio(toMP3: recordFilePatch, isDeleteSourchFile: false)
    }
    @objc func playRecord() {
        do {
            player = try AVAudioPlayer(contentsOf: URL(fileURLWithPath: recordMp3FilePatch))
            DLog("歌曲长度：\(player!.duration)")
            player!.play()
        } catch let err {
            DLog("播放失败:\(err.localizedDescription)")
        }
    }
    //上传录音
    func sendData(type:Any,id:Any,name:Any,filePath:String,duration:String){
        let data:Data = try! Data.init(contentsOf: URL.init(fileURLWithPath: filePath), options:.alwaysMapped)
        let params = ["token":UserModel.getUserModel().token,"type":type,"parallelism_id":id,"parallelism_name":name,"duration":String(Double(duration)!*1000)]
        PublicMethod.showProgressWithStr(statusStr: "上传录音中")
        LoginRequest.postRecordWith(params: params as! Dictionary<String, Any>, data: data, url: passport+SEND_RECORD, hadToast: true, fail: { (dic) in
            PublicMethod.dismissWithError()
        }) { (dic) in
            DLog(dic)
            PublicMethod.dismiss()
            let recId = dic["id"]
            PublicMethod.showProgressWithStr(statusStr: "获取标签中")
            LoginRequest.getPost(methodName: RECORD_LABEL, params: [kToken:UserModel.getUserModel().token], hadToast: true, fail: { (dic) in
                DLog(dic)
                PublicMethod.dismissWithError()
            }, success: { (dic) in
                DLog(dic)
                PublicMethod.dismiss()
                var labels = Array<String>()
                for label in dic["data"] as! Array<Dictionary<String,String>>{
                    labels.append(label["label"]!)
                }
                let  addrec = AddRecordTagView.init(modelArr: labels, frame: CGRect(x: 0, y: 0, width: self.view.width, height: self.view.height))
                self.view.addSubview(addrec)
                
                self.saveRecordView?.removeFromSuperview()
                self.saveRecordView = nil
                self.recordView?.removeFromSuperview()
                self.recordView = nil
                addrec.skipBtnClickBlock = {
                    addrec.removeFromSuperview()
                    let alert = UIAlertController.init(title: "录音已保存，您可以在【我的】里的【语音备忘录】中查看", message: nil, preferredStyle: UIAlertControllerStyle.alert, okAndCancel: ("我知道了", ""), btnActions: { (action, key) in
                    })
                    self.present(alert, animated: true, completion: nil)
                }
                addrec.sureBtnClickBlock = {name,tag in
                    PublicMethod.showProgressWithStr(statusStr: "上传信息中")
                    LoginRequest.getPost(methodName: RECORDING_MARK_ADD, params: ["id":recId,"intitle":name,"label":tag,kToken:UserModel.getUserModel().token], hadToast: true, fail: { (dic) in
                        DLog(dic)
                        PublicMethod.dismissWithError()
                    }, success: { (dic) in
                        PublicMethod.dismissWithSuccess(str: "上传成功")
                        addrec.removeFromSuperview()
                        let alert = UIAlertController.init(title: "录音已保存，您可以在【我的】里的【语音备忘录】中查看", message: nil, preferredStyle: UIAlertControllerStyle.alert, okAndCancel: ("我知道了", ""), btnActions: { (action, key) in
                        })
                        self.present(alert, animated: true, completion: nil)
                    })
                }
            })
        }
    }
    
    
    
    
    
    
    func isHasTime(){
        PublicMethod.showProgress()
        LoginRequest.getPost(methodName: COACHPAY_LIST, params: [:].addToken(), hadToast: true, fail: { (dic) in
            PublicMethod.dismiss()
        }) {[weak self] (dic) in
            PublicMethod.dismiss()
            DLog(dic)
            
            let a =  JSON(dic["left_hour_str"]).floatValue
            if a <= 0 {
                PublicMethod.toastWithText(toastText: "您好，您的可预约时长用完了")
                return
            }else{
                
                var per = "0.0"
                let use = JSON(dic["used_minute"] as Any).intValue
                let left = JSON(dic["left_minute"] as Any).intValue
                if use+left != 0{
                    per = String.init(format: "%.1f",CGFloat(left)/CGFloat((use+left)))
                    
                }
                
                self?.toMakeAppointment(per:per,left:"\(left)")
            }
        }
        
    }
    
    func toMakeAppointment(per:String,left:String){
        
        
        
        
        
        PublicMethod.showProgress()
        LoginRequest.getPost(methodName: CONSULT_PRO_LIST, params: [kToken:UserModel.getUserModel().token], hadToast: true, fail: { (dic) in
            
        }) {[weak self] (dic) in
            PublicMethod.dismiss()
            
            if dic["data"] is Array<Any>{
                var btnDic = Dictionary<String,String>()
                for oneDic in dic["data"] as! Array<Dictionary<String,Any>>{
                    btnDic[oneDic["project_id"]! as! String] = (oneDic["pro_name"] as! String)
                }
                btnDic[kCancel] = "取消"
                let alertCont = UIAlertController.init(title: "选择项目", message: nil, preferredStyle: UIAlertControllerStyle.alert, btns: btnDic, btnActions: {action,key in
                    DLog(key)
                    if key != kCancel{
                        
                        
                        
                        let vc = BookingTutoringVC()
                        
                        
                        let array = JSON(dic["data"]).arrayObject?.filter({ (subdic) -> Bool in
                            return JSON(subdic).dictionaryObject!["project_id"] as! String == key
                        })
                        var mArray = Array<MemberModel>()
                        
                        if (array?.count)! > 0 {
                            let subMarray = JSON(array?.first)["member"].arrayObject
                            if subMarray != nil {
                                for subdic in subMarray! {
                                    let m = MemberModel()
                                    m.head = JSON(subdic)["head"].stringValue
                                    m.id = JSON(subdic)["userid"].stringValue
                                    m.name = JSON(subdic)["realname"].stringValue
                                    mArray.append(m)
                                }
                            }
                            
                        }
                        
                        let model = ["projectId":key,"project_name":btnDic[key],"percentage":per,"left_minute":left]
                        vc.configAlreadyInfo(model: model, mArray: mArray)
                        self?.navigationController?.pushViewController(vc, animated: true)
                        
                        
                        //                        DLog(1)
                        //                        let viewC2 = SLViewController.init()
                        //                        viewC2.setCookie()
                        //                        viewC2.webView.loadRequest(URLRequest.init(url:url!))
                        //
                        //                        viewC2.func_cancelModify = {
                        //                            self.navigationController?.isNavigationBarHidden = false
                        //                            self.navigationController?.popToRootViewController(animated: false)
                        //                        }
                        //                        viewC2.func_createSuccess = {[weak self] consultId in
                        //                            //            PublicMethod.dismissWithSuccess(str: "修改已提交")
                        //                            //详情
                        //                            self?.isChange = true
                        //
                        //                            let vc = TutoringDetailVC()
                        //                            vc.new_consult_id = consultId
                        //                            (sharePublicDataSingle.publicTabbar?.childViewControllers[2] as! BaseNavigationController).pushViewController(vc, animated: false)
                        //                        }
                        //                        viewC2.tabBarController?.tabBar.isHidden = true
                        //                        self.navigationController?.pushViewController(viewC2, animated: true)
                    }
                    
                })
                self?.present(alertCont, animated: true, completion: nil)
            }
        }
        
    }
    
    
    
    
    
}
